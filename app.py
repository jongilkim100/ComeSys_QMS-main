import streamlit as st
import pandas as pd
import numpy as np
import streamlit.components.v1 as components
import plotly.graph_objects as go
from datetime import datetime, timedelta,date
from streamlit_echarts import st_echarts
import time
import sqlite3
import plotly.io as pio
from dateutil.tz import gettz
from datetime import date
import requests
import base64
from urllib import request
from PIL import Image
from io import BytesIO
import FinanceDataReader as fdr
import os

from selenium import webdriver
from selenium.webdriver.common.by import By

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait

st.set_page_config(layout = "wide", initial_sidebar_state = "expanded")

수입검사_불량수량_2023년 =  500
공정검사_불량수량_2023년 =  140
출하검사_불량수량_2023년 =  273
고객사라인불만건수_2023년 = 264
필드클레임목표금액_2023년 = 100_000_000
Q_Cost_2023년 =             6_000_000

필드클레임목표금액_2023년_comma = format(필드클레임목표금액_2023년/1000,",")
Q_Cost_2023년_comma =             format(Q_Cost_2023년/1000,",")

##################수입검사###########################################################
conn = sqlite3.connect('./db/qms.db')
수입검사현황 = pd.read_sql("SELECT * FROM 수입검사현황_2023;",conn,index_col='index')
# 수입검사현황.reset_index('index',inplace=True)
수입검사현황['year'] = 수입검사현황['일자'].str.slice(start=0,stop=4)
수입검사현황 = 수입검사현황[수입검사현황['year'] == '2023'].copy()

수입검사부적합합계_2023 = int(수입검사현황['부적합수량'].sum())
수입검사부적합진행_2023 = round((수입검사부적합합계_2023/수입검사_불량수량_2023년)*100,1)
##################수입검사###########################################################

##################공정검사###########################################################
conn = sqlite3.connect('./db/qms.db')
공정검사현황 = pd.read_sql("SELECT * FROM 공정검사현황_2023;",conn,index_col='index')
# 공정검사현황.reset_index('index',inplace=True)
공정검사현황['year'] = 공정검사현황['일자'].str.slice(start=0,stop=4)
공정검사현황 = 공정검사현황[공정검사현황['year'] == '2023'].copy()

공정검사부적합합계_2023 = int(공정검사현황['부적합수량'].sum())
공정검사부적합진행_2023 = round((공정검사부적합합계_2023/공정검사_불량수량_2023년)*100,1)
##################공정검사###########################################################

##################출하검사###########################################################
conn = sqlite3.connect('./db/qms.db')
출하검사현황 = pd.read_sql("SELECT * FROM 출하검사현황_2023;",conn,index_col='index')
# 출하검사현황.reset_index('index',inplace=True)
출하검사현황['year'] = 출하검사현황['일자'].str.slice(start=0,stop=4)
출하검사현황 = 출하검사현황[출하검사현황['year'] == '2023'].copy()

출하검사부적합합계_2023 = int(출하검사현황['부적합수량'].sum())
출하검사부적합진행_2023 = round((출하검사부적합합계_2023/출하검사_불량수량_2023년)*100,1)
##################출하검사###########################################################

##################고객사라인부적합###########################################################
conn = sqlite3.connect('./db/qms.db')
고객사라인부적합현황 = pd.read_sql("SELECT * FROM 인라인부적합현황_2023;",conn,index_col='index')
# 고객사라인부적합현황.reset_index('index',inplace=True)
고객사라인부적합현황['year'] = 고객사라인부적합현황['일자'].str.slice(start=0,stop=4)
고객사라인부적합현황 = 고객사라인부적합현황[고객사라인부적합현황['year'] == '2023'].copy()

고객사라인부적합현황합계_2023 = int(고객사라인부적합현황['수량'].sum())
고객사라인부적합진행_2023 = round((고객사라인부적합현황합계_2023/고객사라인불만건수_2023년)*100,1)
##################고객사라인부적합###########################################################

##################필드클레임현황###########################################################
conn = sqlite3.connect('./db/qms.db')
필드클레임현황 = pd.read_sql("SELECT * FROM 클레임비용현황_2023;",conn,index_col='index')
# 필드클레임현황.reset_index('index',inplace=True)
필드클레임현황['year'] = 필드클레임현황['일자'].str.slice(start=0,stop=4)
필드클레임현황 = 필드클레임현황[필드클레임현황['year'] == '2023'].copy()

필드클레임현황합계_2023 = int(필드클레임현황['청구금액'].sum())
필드클레임현황진행_2023 = round((필드클레임현황합계_2023/필드클레임목표금액_2023년)*100,1)
필드클레임현황합계_2023_comma = format(round(필드클레임현황합계_2023/1000,1),",")
##################필드클레임현황###########################################################

##################QCOST현황###########################################################
conn = sqlite3.connect('./db/qms.db')
QCOST현황 = pd.read_sql("SELECT * FROM 고객불만품질비용_2023;",conn,index_col='index')
# QCOST현황.reset_index('index',inplace=True)
QCOST현황['year'] = QCOST현황['일자'].str.slice(start=0,stop=4)
QCOST현황 = QCOST현황[QCOST현황['year'] == '2023'].copy()

QCOST현황합계_2023 = int(QCOST현황['QCOST'].sum())
QCOST현황진행_2023 = round((QCOST현황합계_2023/Q_Cost_2023년)*100,1)
QCOST현황합계_2023_comma = format(round(QCOST현황합계_2023/1000,1),",")
##################필드클레임현황###########################################################

##################수입검사월별집계########################################################
검사수량_1월 = 수입검사현황.query("일자.str.contains('2023.01.')")
검사수량_1월 = int(검사수량_1월['검사수량'].sum())
검사수량_2월 = 수입검사현황.query("일자.str.contains('2023.02.')")
검사수량_2월 = int(검사수량_2월['검사수량'].sum())
검사수량_3월 = 수입검사현황.query("일자.str.contains('2023.03.')")
검사수량_3월 = int(검사수량_3월['검사수량'].sum())
검사수량_4월 = 수입검사현황.query("일자.str.contains('2023.04.')")
검사수량_4월 = int(검사수량_4월['검사수량'].sum())
검사수량_5월 = 수입검사현황.query("일자.str.contains('2023.05.')")
검사수량_5월 = int(검사수량_5월['검사수량'].sum())
검사수량_6월 = 수입검사현황.query("일자.str.contains('2023.06.')")
검사수량_6월 = int(검사수량_6월['검사수량'].sum())
검사수량_7월 = 수입검사현황.query("일자.str.contains('2023.07.')")
검사수량_7월 = int(검사수량_7월['검사수량'].sum())
검사수량_8월 = 수입검사현황.query("일자.str.contains('2023.08.')")
검사수량_8월 = int(검사수량_8월['검사수량'].sum())
검사수량_9월 = 수입검사현황.query("일자.str.contains('2023.09.')")
검사수량_9월 = int(검사수량_9월['검사수량'].sum())
검사수량_10월 = 수입검사현황.query("일자.str.contains('2023.10.')")
검사수량_10월 = int(검사수량_10월['검사수량'].sum())
검사수량_11월 = 수입검사현황.query("일자.str.contains('2023.11.')")
검사수량_11월 = int(검사수량_11월['검사수량'].sum())
검사수량_12월 = 수입검사현황.query("일자.str.contains('2023.12.')")
검사수량_12월 = int(검사수량_12월['검사수량'].sum())
검사수량_합계 = (검사수량_1월+검사수량_2월+검사수량_3월+검사수량_4월+검사수량_5월+검사수량_6월+
                 검사수량_7월+검사수량_8월+검사수량_9월+검사수량_10월+검사수량_11월+검사수량_12월)

검사수량_리스트 = [검사수량_1월,검사수량_2월,검사수량_3월,검사수량_4월,검사수량_5월,검사수량_6월,검사수량_7월,
                검사수량_8월,검사수량_9월,검사수량_10월,검사수량_11월,검사수량_12월,검사수량_합계]

#################################################################################################################################
부적합수량_1월 = 수입검사현황.query("일자.str.contains('2023.01.')")
부적합수량_1월 = int(부적합수량_1월['부적합수량'].sum())
부적합수량_2월 = 수입검사현황.query("일자.str.contains('2023.02.')")
부적합수량_2월 = int(부적합수량_2월['부적합수량'].sum())
부적합수량_3월 = 수입검사현황.query("일자.str.contains('2023.03.')")
부적합수량_3월 = int(부적합수량_3월['부적합수량'].sum())
부적합수량_4월 = 수입검사현황.query("일자.str.contains('2023.04.')")
부적합수량_4월 = int(부적합수량_4월['부적합수량'].sum())
부적합수량_5월 = 수입검사현황.query("일자.str.contains('2023.05.')")
부적합수량_5월 = int(부적합수량_5월['부적합수량'].sum())
부적합수량_6월 = 수입검사현황.query("일자.str.contains('2023.06.')")
부적합수량_6월 = int(부적합수량_6월['부적합수량'].sum())
부적합수량_7월 = 수입검사현황.query("일자.str.contains('2023.07.')")
부적합수량_7월 = int(부적합수량_7월['부적합수량'].sum())
부적합수량_8월 = 수입검사현황.query("일자.str.contains('2023.08.')")
부적합수량_8월 = int(부적합수량_8월['부적합수량'].sum())
부적합수량_9월 = 수입검사현황.query("일자.str.contains('2023.09.')")
부적합수량_9월 = int(부적합수량_9월['부적합수량'].sum())
부적합수량_10월 = 수입검사현황.query("일자.str.contains('2023.10.')")
부적합수량_10월 = int(부적합수량_10월['부적합수량'].sum())
부적합수량_11월 = 수입검사현황.query("일자.str.contains('2023.11.')")
부적합수량_11월 = int(부적합수량_11월['부적합수량'].sum())
부적합수량_12월 = 수입검사현황.query("일자.str.contains('2023.12.')")
부적합수량_12월 = int(부적합수량_12월['부적합수량'].sum())
부적합수량_합계 = (부적합수량_1월+부적합수량_2월+부적합수량_3월+부적합수량_4월+부적합수량_5월+부적합수량_6월+부적합수량_7월+
                    부적합수량_8월+부적합수량_9월+부적합수량_10월+부적합수량_11월+부적합수량_12월)

부적합수량_리스트 = [부적합수량_1월,부적합수량_2월,부적합수량_3월,부적합수량_4월,부적합수량_5월,부적합수량_6월,부적합수량_7월,
                    부적합수량_8월,부적합수량_9월,부적합수량_10월,부적합수량_11월,부적합수량_12월,부적합수량_합계]

########################################################################################
##################수입검사월별집계########################################################
#################################################################################################################################
공정검사수량_1월 = 공정검사현황.query("일자.str.contains('2023.01.')")
공정검사수량_1월 = int(공정검사수량_1월['검사수량'].sum())
공정검사수량_2월 = 공정검사현황.query("일자.str.contains('2023.02.')")
공정검사수량_2월 = int(공정검사수량_2월['검사수량'].sum())
공정검사수량_3월 = 공정검사현황.query("일자.str.contains('2023.03.')")
공정검사수량_3월 = int(공정검사수량_3월['검사수량'].sum())
공정검사수량_4월 = 공정검사현황.query("일자.str.contains('2023.04.')")
공정검사수량_4월 = int(공정검사수량_4월['검사수량'].sum())
공정검사수량_5월 = 공정검사현황.query("일자.str.contains('2023.05.')")
공정검사수량_5월 = int(공정검사수량_5월['검사수량'].sum())
공정검사수량_6월 = 공정검사현황.query("일자.str.contains('2023.06.')")
공정검사수량_6월 = int(공정검사수량_6월['검사수량'].sum())
공정검사수량_7월 = 공정검사현황.query("일자.str.contains('2023.07.')")
공정검사수량_7월 = int(공정검사수량_7월['검사수량'].sum())
공정검사수량_8월 = 공정검사현황.query("일자.str.contains('2023.08.')")
공정검사수량_8월 = int(공정검사수량_8월['검사수량'].sum())
공정검사수량_9월 = 공정검사현황.query("일자.str.contains('2023.09.')")
공정검사수량_9월 = int(공정검사수량_9월['검사수량'].sum())
공정검사수량_10월 = 공정검사현황.query("일자.str.contains('2023.10.')")
공정검사수량_10월 = int(공정검사수량_10월['검사수량'].sum())
공정검사수량_11월 = 공정검사현황.query("일자.str.contains('2023.11.')")
공정검사수량_11월 = int(공정검사수량_11월['검사수량'].sum())
공정검사수량_12월 = 공정검사현황.query("일자.str.contains('2023.12.')")
공정검사수량_12월 = int(공정검사수량_12월['검사수량'].sum())
공정검사수량_합계 = (공정검사수량_1월+공정검사수량_2월+공정검사수량_3월+공정검사수량_4월+공정검사수량_5월+공정검사수량_6월+공정검사수량_7월+
                공정검사수량_8월+공정검사수량_9월+공정검사수량_10월+공정검사수량_11월+공정검사수량_12월)

공정검사수량_리스트 = [공정검사수량_1월,공정검사수량_2월,공정검사수량_3월,공정검사수량_4월,공정검사수량_5월,공정검사수량_6월,공정검사수량_7월,
                공정검사수량_8월,공정검사수량_9월,공정검사수량_10월,공정검사수량_11월,공정검사수량_12월,공정검사수량_합계]
#################################################################################################################################
공정부적합수량_1월 = 공정검사현황.query("일자.str.contains('2023.01.')")
공정부적합수량_1월 = int(공정부적합수량_1월['부적합수량'].sum())
공정부적합수량_2월 = 공정검사현황.query("일자.str.contains('2023.02.')")
공정부적합수량_2월 = int(공정부적합수량_2월['부적합수량'].sum())
공정부적합수량_3월 = 공정검사현황.query("일자.str.contains('2023.03.')")
공정부적합수량_3월 = int(공정부적합수량_3월['부적합수량'].sum())
공정부적합수량_4월 = 공정검사현황.query("일자.str.contains('2023.04.')")
공정부적합수량_4월 = int(공정부적합수량_4월['부적합수량'].sum())
공정부적합수량_5월 = 공정검사현황.query("일자.str.contains('2023.05.')")
공정부적합수량_5월 = int(공정부적합수량_5월['부적합수량'].sum())
공정부적합수량_6월 = 공정검사현황.query("일자.str.contains('2023.06.')")
공정부적합수량_6월 = int(공정부적합수량_6월['부적합수량'].sum())
공정부적합수량_7월 = 공정검사현황.query("일자.str.contains('2023.07.')")
공정부적합수량_7월 = int(공정부적합수량_7월['부적합수량'].sum())
공정부적합수량_8월 = 공정검사현황.query("일자.str.contains('2023.08.')")
공정부적합수량_8월 = int(공정부적합수량_8월['부적합수량'].sum())
공정부적합수량_9월 = 공정검사현황.query("일자.str.contains('2023.09.')")
공정부적합수량_9월 = int(공정부적합수량_9월['부적합수량'].sum())
공정부적합수량_10월 = 공정검사현황.query("일자.str.contains('2023.10.')")
공정부적합수량_10월 = int(공정부적합수량_10월['부적합수량'].sum())
공정부적합수량_11월 = 공정검사현황.query("일자.str.contains('2023.11.')")
공정부적합수량_11월 = int(공정부적합수량_11월['부적합수량'].sum())
공정부적합수량_12월 = 공정검사현황.query("일자.str.contains('2023.12.')")
공정부적합수량_12월 = int(공정부적합수량_12월['부적합수량'].sum())
공정부적합수량_합계 = (공정부적합수량_1월+공정부적합수량_2월+공정부적합수량_3월+공정부적합수량_4월+공정부적합수량_5월+공정부적합수량_6월+공정부적합수량_7월+
                       공정부적합수량_8월+공정부적합수량_9월+공정부적합수량_10월+공정부적합수량_11월+공정부적합수량_12월)

공정부적합수량_리스트 = [공정부적합수량_1월,공정부적합수량_2월,공정부적합수량_3월,공정부적합수량_4월,공정부적합수량_5월,공정부적합수량_6월,공정부적합수량_7월,
                    공정부적합수량_8월,공정부적합수량_9월,공정부적합수량_10월,공정부적합수량_11월,공정부적합수량_12월,공정부적합수량_합계]
########################################################################################
#################################################################################################################################
출하검사수량_1월 = 출하검사현황.query("일자.str.contains('2023.01.')")
출하검사수량_1월 = int(출하검사수량_1월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_2월 = 출하검사현황.query("일자.str.contains('2023.02.')")
출하검사수량_2월 = int(출하검사수량_2월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_3월 = 출하검사현황.query("일자.str.contains('2023.03.')")
출하검사수량_3월 = int(출하검사수량_3월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_4월 = 출하검사현황.query("일자.str.contains('2023.04.')")
출하검사수량_4월 = int(출하검사수량_4월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_5월 = 출하검사현황.query("일자.str.contains('2023.05.')")
출하검사수량_5월 = int(출하검사수량_5월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_6월 = 출하검사현황.query("일자.str.contains('2023.06.')")
출하검사수량_6월 = int(출하검사수량_6월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_7월 = 출하검사현황.query("일자.str.contains('2023.07.')")
출하검사수량_7월 = int(출하검사수량_7월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_8월 = 출하검사현황.query("일자.str.contains('2023.08.')")
출하검사수량_8월 = int(출하검사수량_8월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_9월 = 출하검사현황.query("일자.str.contains('2023.09.')")
출하검사수량_9월 = int(출하검사수량_9월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_10월 = 출하검사현황.query("일자.str.contains('2023.10.')")
출하검사수량_10월 = int(출하검사수량_10월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_11월 = 출하검사현황.query("일자.str.contains('2023.11.')")
출하검사수량_11월 = int(출하검사수량_11월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_12월 = 출하검사현황.query("일자.str.contains('2023.12.')")
출하검사수량_12월 = int(출하검사수량_12월['검사수량'].astype(float, errors = 'raise').sum())
출하검사수량_합계 = (출하검사수량_1월+출하검사수량_2월+출하검사수량_3월+출하검사수량_4월+출하검사수량_5월+출하검사수량_6월+출하검사수량_7월+
                   출하검사수량_8월+출하검사수량_9월+출하검사수량_10월+출하검사수량_11월+출하검사수량_12월)

출하검사수량_리스트 = [출하검사수량_1월,출하검사수량_2월,출하검사수량_3월,출하검사수량_4월,출하검사수량_5월,출하검사수량_6월,출하검사수량_7월,
                   출하검사수량_8월,출하검사수량_9월,출하검사수량_10월,출하검사수량_11월,출하검사수량_12월,출하검사수량_합계]
# print(출하검사수량_리스트)
#################################################################################################################################
출하부적합수량_1월 = 출하검사현황.query("일자.str.contains('2023.01.')")
출하부적합수량_1월 = int(출하부적합수량_1월['부적합수량'].sum())
출하부적합수량_2월 = 출하검사현황.query("일자.str.contains('2023.02.')")
출하부적합수량_2월 = int(출하부적합수량_2월['부적합수량'].sum())
출하부적합수량_3월 = 출하검사현황.query("일자.str.contains('2023.03.')")
출하부적합수량_3월 = int(출하부적합수량_3월['부적합수량'].sum())
출하부적합수량_4월 = 출하검사현황.query("일자.str.contains('2023.04.')")
출하부적합수량_4월 = int(출하부적합수량_4월['부적합수량'].sum())
출하부적합수량_5월 = 출하검사현황.query("일자.str.contains('2023.05.')")
출하부적합수량_5월 = int(출하부적합수량_5월['부적합수량'].sum())
출하부적합수량_6월 = 출하검사현황.query("일자.str.contains('2023.06.')")
출하부적합수량_6월 = int(출하부적합수량_6월['부적합수량'].sum())
출하부적합수량_7월 = 출하검사현황.query("일자.str.contains('2023.07.')")
출하부적합수량_7월 = int(출하부적합수량_7월['부적합수량'].sum())
출하부적합수량_8월 = 출하검사현황.query("일자.str.contains('2023.08.')")
출하부적합수량_8월 = int(출하부적합수량_8월['부적합수량'].sum())
출하부적합수량_9월 = 출하검사현황.query("일자.str.contains('2023.09.')")
출하부적합수량_9월 = int(출하부적합수량_9월['부적합수량'].sum())
출하부적합수량_10월 = 출하검사현황.query("일자.str.contains('2023.10.')")
출하부적합수량_10월 = int(출하부적합수량_10월['부적합수량'].sum())
출하부적합수량_11월 = 출하검사현황.query("일자.str.contains('2023.11.')")
출하부적합수량_11월 = int(출하부적합수량_11월['부적합수량'].sum())
출하부적합수량_12월 = 출하검사현황.query("일자.str.contains('2023.12.')")
출하부적합수량_12월 = int(출하부적합수량_12월['부적합수량'].sum())
출하부적합수량_합계 = (출하부적합수량_1월+출하부적합수량_2월+출하부적합수량_3월+출하부적합수량_4월+출하부적합수량_5월+출하부적합수량_6월+출하부적합수량_7월+
                     출하부적합수량_8월+출하부적합수량_9월+출하부적합수량_10월+출하부적합수량_11월+출하부적합수량_12월)

출하부적합수량_리스트 = [출하부적합수량_1월,출하부적합수량_2월,출하부적합수량_3월,출하부적합수량_4월,출하부적합수량_5월,출하부적합수량_6월,출하부적합수량_7월,
                     출하부적합수량_8월,출하부적합수량_9월,출하부적합수량_10월,출하부적합수량_11월,출하부적합수량_12월,출하부적합수량_합계]
#################################################################################################################################
#################################################################################################################################
인라인부적합수량_1월 = 고객사라인부적합현황.query("일자.str.contains('2023.01.')")
인라인부적합수량_1월 = int(인라인부적합수량_1월['수량'].sum())
인라인부적합수량_2월 = 고객사라인부적합현황.query("일자.str.contains('2023.02.')")
인라인부적합수량_2월 = int(인라인부적합수량_2월['수량'].sum())
인라인부적합수량_3월 = 고객사라인부적합현황.query("일자.str.contains('2023.03.')")
인라인부적합수량_3월 = int(인라인부적합수량_3월['수량'].sum())
인라인부적합수량_4월 = 고객사라인부적합현황.query("일자.str.contains('2023.04.')")
인라인부적합수량_4월 = int(인라인부적합수량_4월['수량'].sum())
인라인부적합수량_5월 = 고객사라인부적합현황.query("일자.str.contains('2023.05.')")
인라인부적합수량_5월 = int(인라인부적합수량_5월['수량'].sum())
인라인부적합수량_6월 = 고객사라인부적합현황.query("일자.str.contains('2023.06.')")
인라인부적합수량_6월 = int(인라인부적합수량_6월['수량'].sum())
인라인부적합수량_7월 = 고객사라인부적합현황.query("일자.str.contains('2023.07.')")
인라인부적합수량_7월 = int(인라인부적합수량_7월['수량'].sum())
인라인부적합수량_8월 = 고객사라인부적합현황.query("일자.str.contains('2023.08.')")
인라인부적합수량_8월 = int(인라인부적합수량_8월['수량'].sum())
인라인부적합수량_9월 = 고객사라인부적합현황.query("일자.str.contains('2023.09.')")
인라인부적합수량_9월 = int(인라인부적합수량_9월['수량'].sum())
인라인부적합수량_10월 = 고객사라인부적합현황.query("일자.str.contains('2023.10.')")
인라인부적합수량_10월 = int(인라인부적합수량_10월['수량'].sum())
인라인부적합수량_11월 = 고객사라인부적합현황.query("일자.str.contains('2023.11.')")
인라인부적합수량_11월 = int(인라인부적합수량_11월['수량'].sum())
인라인부적합수량_12월 = 고객사라인부적합현황.query("일자.str.contains('2023.12.')")
인라인부적합수량_12월 = int(인라인부적합수량_12월['수량'].sum())
인라인부적합수량_합계 = (인라인부적합수량_1월+인라인부적합수량_2월+인라인부적합수량_3월+인라인부적합수량_4월+인라인부적합수량_5월+인라인부적합수량_6월+인라인부적합수량_7월+
                   인라인부적합수량_8월+인라인부적합수량_9월+인라인부적합수량_10월+인라인부적합수량_11월+인라인부적합수량_12월)

인라인부적합수량_리스트 = [인라인부적합수량_1월,인라인부적합수량_2월,인라인부적합수량_3월,인라인부적합수량_4월,인라인부적합수량_5월,인라인부적합수량_6월,인라인부적합수량_7월,
                   인라인부적합수량_8월,인라인부적합수량_9월,인라인부적합수량_10월,인라인부적합수량_11월,인라인부적합수량_12월,인라인부적합수량_합계]
# print(인라인부적합수량_리스트)
#################################################################################################################################
#################################################################################################################################
필드클레임_1월 = 필드클레임현황.query("일자.str.contains('2023.01.')")
필드클레임_1월 = int(len(필드클레임_1월['수량']))
필드클레임_2월 = 필드클레임현황.query("일자.str.contains('2023.02.')")
필드클레임_2월 = int(len(필드클레임_2월['수량']))
필드클레임_3월 = 필드클레임현황.query("일자.str.contains('2023.03.')")
필드클레임_3월 = int(len(필드클레임_3월['수량']))
필드클레임_4월 = 필드클레임현황.query("일자.str.contains('2023.04.')")
필드클레임_4월 = int(len(필드클레임_4월['수량']))
필드클레임_5월 = 필드클레임현황.query("일자.str.contains('2023.05.')")
필드클레임_5월 = int(len(필드클레임_5월['수량']))
필드클레임_6월 = 필드클레임현황.query("일자.str.contains('2023.06.')")
필드클레임_6월 = int(len(필드클레임_6월['수량']))
필드클레임_7월 = 필드클레임현황.query("일자.str.contains('2023.07.')")
필드클레임_7월 = int(len(필드클레임_7월['수량']))
필드클레임_8월 = 필드클레임현황.query("일자.str.contains('2023.08.')")
필드클레임_8월 = int(len(필드클레임_8월['수량']))
필드클레임_9월 = 필드클레임현황.query("일자.str.contains('2023.09.')")
필드클레임_9월 = int(len(필드클레임_9월['수량']))
필드클레임_10월 = 필드클레임현황.query("일자.str.contains('2023.10.')")
필드클레임_10월 = int(len(필드클레임_10월['수량']))
필드클레임_11월 = 필드클레임현황.query("일자.str.contains('2023.11.')")
필드클레임_11월 = int(len(필드클레임_11월['수량']))
필드클레임_12월 = 필드클레임현황.query("일자.str.contains('2023.12.')")
필드클레임_12월 = int(len(필드클레임_12월['수량']))
필드클레임_합계 = (필드클레임_1월+필드클레임_2월+필드클레임_3월+필드클레임_4월+필드클레임_5월+필드클레임_6월+필드클레임_7월+
                   필드클레임_8월+필드클레임_9월+필드클레임_10월+필드클레임_11월+필드클레임_12월)

필드클레임_리스트 = [필드클레임_1월,필드클레임_2월,필드클레임_3월,필드클레임_4월,필드클레임_5월,필드클레임_6월,필드클레임_7월,
                   필드클레임_8월,필드클레임_9월,필드클레임_10월,필드클레임_11월,필드클레임_12월,필드클레임_합계]
################################################################################################################################
필드클레임비용_1월 = 필드클레임현황.query("일자.str.contains('2023.01.')")
필드클레임비용_1월 = int(필드클레임비용_1월['청구금액'].sum())
필드클레임비용_2월 = 필드클레임현황.query("일자.str.contains('2023.02.')")
필드클레임비용_2월 = int(필드클레임비용_2월['청구금액'].sum())
필드클레임비용_3월 = 필드클레임현황.query("일자.str.contains('2023.03.')")
필드클레임비용_3월 = int(필드클레임비용_3월['청구금액'].sum())
필드클레임비용_4월 = 필드클레임현황.query("일자.str.contains('2023.04.')")
필드클레임비용_4월 = int(필드클레임비용_4월['청구금액'].sum())
필드클레임비용_5월 = 필드클레임현황.query("일자.str.contains('2023.05.')")
필드클레임비용_5월 = int(필드클레임비용_5월['청구금액'].sum())
필드클레임비용_6월 = 필드클레임현황.query("일자.str.contains('2023.06.')")
필드클레임비용_6월 = int(필드클레임비용_6월['청구금액'].sum())
필드클레임비용_7월 = 필드클레임현황.query("일자.str.contains('2023.07.')")
필드클레임비용_7월 = int(필드클레임비용_7월['청구금액'].sum())
필드클레임비용_8월 = 필드클레임현황.query("일자.str.contains('2023.08.')")
필드클레임비용_8월 = int(필드클레임비용_8월['청구금액'].sum())
필드클레임비용_9월 = 필드클레임현황.query("일자.str.contains('2023.09.')")
필드클레임비용_9월 = int(필드클레임비용_9월['청구금액'].sum())
필드클레임비용_10월 = 필드클레임현황.query("일자.str.contains('2023.10.')")
필드클레임비용_10월 = int(필드클레임비용_10월['청구금액'].sum())
필드클레임비용_11월 = 필드클레임현황.query("일자.str.contains('2023.11.')")
필드클레임비용_11월 = int(필드클레임비용_11월['청구금액'].sum())
필드클레임비용_12월 = 필드클레임현황.query("일자.str.contains('2023.12.')")
필드클레임비용_12월 = int(필드클레임비용_12월['청구금액'].sum())
필드클레임비용_합계 = (필드클레임비용_1월+필드클레임비용_2월+필드클레임비용_3월+필드클레임비용_4월+필드클레임비용_5월+필드클레임비용_6월+필드클레임비용_7월+
                     필드클레임비용_8월+필드클레임비용_9월+필드클레임비용_10월+필드클레임비용_11월+필드클레임비용_12월)

필드클레임비용_리스트 = [필드클레임비용_1월,필드클레임비용_2월,필드클레임비용_3월,필드클레임비용_4월,필드클레임비용_5월,필드클레임비용_6월,필드클레임비용_7월,
                     필드클레임비용_8월,필드클레임비용_9월,필드클레임비용_10월,필드클레임비용_11월,필드클레임비용_12월,필드클레임비용_합계]
#################################################################################################################################
#################################################################################################################################
고객불만건수_1월 = QCOST현황.query("일자.str.contains('2023.01.')")
고객불만건수_1월 = int(고객불만건수_1월['수량'].sum())
고객불만건수_2월 = QCOST현황.query("일자.str.contains('2023.02.')")
고객불만건수_2월 = int(고객불만건수_2월['수량'].sum())
고객불만건수_3월 = QCOST현황.query("일자.str.contains('2023.03.')")
고객불만건수_3월 = int(고객불만건수_3월['수량'].sum())
고객불만건수_4월 = QCOST현황.query("일자.str.contains('2023.04.')")
고객불만건수_4월 = int(고객불만건수_4월['수량'].sum())
고객불만건수_5월 = QCOST현황.query("일자.str.contains('2023.05.')")
고객불만건수_5월 = int(고객불만건수_5월['수량'].sum())
고객불만건수_6월 = QCOST현황.query("일자.str.contains('2023.06.')")
고객불만건수_6월 = int(고객불만건수_6월['수량'].sum())
고객불만건수_7월 = QCOST현황.query("일자.str.contains('2023.07.')")
고객불만건수_7월 = int(고객불만건수_7월['수량'].sum())
고객불만건수_8월 = QCOST현황.query("일자.str.contains('2023.08.')")
고객불만건수_8월 = int(고객불만건수_8월['수량'].sum())
고객불만건수_9월 = QCOST현황.query("일자.str.contains('2023.09.')")
고객불만건수_9월 = int(고객불만건수_9월['수량'].sum())
고객불만건수_10월 = QCOST현황.query("일자.str.contains('2023.10.')")
고객불만건수_10월 = int(고객불만건수_10월['수량'].sum())
고객불만건수_11월 = QCOST현황.query("일자.str.contains('2023.11.')")
고객불만건수_11월 = int(고객불만건수_11월['수량'].sum())
고객불만건수_12월 = QCOST현황.query("일자.str.contains('2023.12.')")
고객불만건수_12월 = int(고객불만건수_12월['수량'].sum())
고객불만건수_합계 = (고객불만건수_1월+고객불만건수_2월+고객불만건수_3월+고객불만건수_4월+고객불만건수_5월+고객불만건수_6월+고객불만건수_7월+
                   고객불만건수_8월+고객불만건수_9월+고객불만건수_10월+고객불만건수_11월+고객불만건수_12월) 

고객불만건수_리스트 = [고객불만건수_1월,고객불만건수_2월,고객불만건수_3월,고객불만건수_4월,고객불만건수_5월,고객불만건수_6월,고객불만건수_7월,
                   고객불만건수_8월,고객불만건수_9월,고객불만건수_10월,고객불만건수_11월,고객불만건수_12월,고객불만건수_합계]
# print(고객불만건수_리스트)

#################################################################################################################################
고객불만비용_1월 = QCOST현황.query("일자.str.contains('2023.01.')")
고객불만비용_1월 = int(고객불만비용_1월['QCOST'].sum())
고객불만비용_2월 = QCOST현황.query("일자.str.contains('2023.02.')")
고객불만비용_2월 = int(고객불만비용_2월['QCOST'].sum())
고객불만비용_3월 = QCOST현황.query("일자.str.contains('2023.03.')")
고객불만비용_3월 = int(고객불만비용_3월['QCOST'].sum())
고객불만비용_4월 = QCOST현황.query("일자.str.contains('2023.04.')")
고객불만비용_4월 = int(고객불만비용_4월['QCOST'].sum())
고객불만비용_5월 = QCOST현황.query("일자.str.contains('2023.05.')")
고객불만비용_5월 = int(고객불만비용_5월['QCOST'].sum())
고객불만비용_6월 = QCOST현황.query("일자.str.contains('2023.06.')")
고객불만비용_6월 = int(고객불만비용_6월['QCOST'].sum())
고객불만비용_7월 = QCOST현황.query("일자.str.contains('2023.07.')")
고객불만비용_7월 = int(고객불만비용_7월['QCOST'].sum())
고객불만비용_8월 = QCOST현황.query("일자.str.contains('2023.08.')")
고객불만비용_8월 = int(고객불만비용_8월['QCOST'].sum())
고객불만비용_9월 = QCOST현황.query("일자.str.contains('2023.09.')")
고객불만비용_9월 = int(고객불만비용_9월['QCOST'].sum())
고객불만비용_10월 = QCOST현황.query("일자.str.contains('2023.10.')")
고객불만비용_10월 = int(고객불만비용_10월['QCOST'].sum())
고객불만비용_11월 = QCOST현황.query("일자.str.contains('2023.11.')")
고객불만비용_11월 = int(고객불만비용_11월['QCOST'].sum())
고객불만비용_12월 = QCOST현황.query("일자.str.contains('2023.12.')")
고객불만비용_12월 = int(고객불만비용_12월['QCOST'].sum())
고객불만비용_합계 = (고객불만비용_1월+고객불만비용_2월+고객불만비용_3월+고객불만비용_4월+고객불만비용_5월+고객불만비용_6월+고객불만비용_7월+
                     고객불만비용_8월+고객불만비용_9월+고객불만비용_10월+고객불만비용_11월+고객불만비용_12월)

고객불만비용_리스트 = [고객불만비용_1월,고객불만비용_2월,고객불만비용_3월,고객불만비용_4월,고객불만비용_5월,고객불만비용_6월,고객불만비용_7월,
                     고객불만비용_8월,고객불만비용_9월,고객불만비용_10월,고객불만비용_11월,고객불만비용_12월,고객불만비용_합계]
#################################################################################################################################

##################곤산수입검사월별집계########################################################
conn1 = sqlite3.connect('./db/qms_kunshan.db')
수입검사현황_곤산 = pd.read_sql("SELECT * FROM 곤산_수입검사현황;",conn1,index_col='index')

곤산검사수량_1월 = 수입검사현황_곤산.query("일자.str.contains('2023.01.')")
곤산검사수량_1월 = int(곤산검사수량_1월['검사수량'].sum())
곤산검사수량_2월 = 수입검사현황_곤산.query("일자.str.contains('2023.02.')")
곤산검사수량_2월 = int(곤산검사수량_2월['검사수량'].sum())
곤산검사수량_3월 = 수입검사현황_곤산.query("일자.str.contains('2023.03.')")
곤산검사수량_3월 = int(곤산검사수량_3월['검사수량'].sum())
곤산검사수량_4월 = 수입검사현황_곤산.query("일자.str.contains('2023.04.')")
곤산검사수량_4월 = int(곤산검사수량_4월['검사수량'].sum())
곤산검사수량_5월 = 수입검사현황_곤산.query("일자.str.contains('2023.05.')")
곤산검사수량_5월 = int(곤산검사수량_5월['검사수량'].sum())
곤산검사수량_6월 = 수입검사현황_곤산.query("일자.str.contains('2023.06.')")
곤산검사수량_6월 = int(곤산검사수량_6월['검사수량'].sum())
곤산검사수량_7월 = 수입검사현황_곤산.query("일자.str.contains('2023.07.')")
곤산검사수량_7월 = int(곤산검사수량_7월['검사수량'].sum())
곤산검사수량_8월 = 수입검사현황_곤산.query("일자.str.contains('2023.08.')")
곤산검사수량_8월 = int(곤산검사수량_8월['검사수량'].sum())
곤산검사수량_9월 = 수입검사현황_곤산.query("일자.str.contains('2023.09.')")
곤산검사수량_9월 = int(곤산검사수량_9월['검사수량'].sum())
곤산검사수량_10월 = 수입검사현황_곤산.query("일자.str.contains('2023.10.')")
곤산검사수량_10월 = int(곤산검사수량_10월['검사수량'].sum())
곤산검사수량_11월 = 수입검사현황_곤산.query("일자.str.contains('2023.11.')")
곤산검사수량_11월 = int(곤산검사수량_11월['검사수량'].sum())
곤산검사수량_12월 = 수입검사현황_곤산.query("일자.str.contains('2023.12.')")
곤산검사수량_12월 = int(곤산검사수량_12월['검사수량'].sum())
곤산검사수량_합계 = (곤산검사수량_1월+곤산검사수량_2월+곤산검사수량_3월+곤산검사수량_4월+곤산검사수량_5월+곤산검사수량_6월+
                 곤산검사수량_7월+곤산검사수량_8월+곤산검사수량_9월+곤산검사수량_10월+곤산검사수량_11월+곤산검사수량_12월)

곤산검사수량_리스트 = [곤산검사수량_1월,곤산검사수량_2월,곤산검사수량_3월,곤산검사수량_4월,곤산검사수량_5월,곤산검사수량_6월,곤산검사수량_7월,
                곤산검사수량_8월,곤산검사수량_9월,곤산검사수량_10월,곤산검사수량_11월,곤산검사수량_12월,곤산검사수량_합계]

#################################################################################################################################
곤산부적합수량_1월 = 수입검사현황_곤산.query("일자.str.contains('2023.01.')")
곤산부적합수량_1월 = int(곤산부적합수량_1월['부적합수량'].sum())
곤산부적합수량_2월 = 수입검사현황_곤산.query("일자.str.contains('2023.02.')")
곤산부적합수량_2월 = int(곤산부적합수량_2월['부적합수량'].sum())
곤산부적합수량_3월 = 수입검사현황_곤산.query("일자.str.contains('2023.03.')")
곤산부적합수량_3월 = int(곤산부적합수량_3월['부적합수량'].sum())
곤산부적합수량_4월 = 수입검사현황_곤산.query("일자.str.contains('2023.04.')")
곤산부적합수량_4월 = int(곤산부적합수량_4월['부적합수량'].sum())
곤산부적합수량_5월 = 수입검사현황_곤산.query("일자.str.contains('2023.05.')")
곤산부적합수량_5월 = int(곤산부적합수량_5월['부적합수량'].sum())
곤산부적합수량_6월 = 수입검사현황_곤산.query("일자.str.contains('2023.06.')")
곤산부적합수량_6월 = int(곤산부적합수량_6월['부적합수량'].sum())
곤산부적합수량_7월 = 수입검사현황_곤산.query("일자.str.contains('2023.07.')")
곤산부적합수량_7월 = int(곤산부적합수량_7월['부적합수량'].sum())
곤산부적합수량_8월 = 수입검사현황_곤산.query("일자.str.contains('2023.08.')")
곤산부적합수량_8월 = int(곤산부적합수량_8월['부적합수량'].sum())
곤산부적합수량_9월 = 수입검사현황_곤산.query("일자.str.contains('2023.09.')")
곤산부적합수량_9월 = int(곤산부적합수량_9월['부적합수량'].sum())
곤산부적합수량_10월 = 수입검사현황_곤산.query("일자.str.contains('2023.10.')")
곤산부적합수량_10월 = int(곤산부적합수량_10월['부적합수량'].sum())
곤산부적합수량_11월 = 수입검사현황_곤산.query("일자.str.contains('2023.11.')")
곤산부적합수량_11월 = int(곤산부적합수량_11월['부적합수량'].sum())
곤산부적합수량_12월 = 수입검사현황_곤산.query("일자.str.contains('2023.12.')")
곤산부적합수량_12월 = int(곤산부적합수량_12월['부적합수량'].sum())
곤산부적합수량_합계 = (곤산부적합수량_1월+곤산부적합수량_2월+곤산부적합수량_3월+곤산부적합수량_4월+곤산부적합수량_5월+곤산부적합수량_6월+곤산부적합수량_7월+
                    곤산부적합수량_8월+곤산부적합수량_9월+곤산부적합수량_10월+곤산부적합수량_11월+곤산부적합수량_12월)

곤산부적합수량_리스트 = [곤산부적합수량_1월,곤산부적합수량_2월,곤산부적합수량_3월,곤산부적합수량_4월,곤산부적합수량_5월,곤산부적합수량_6월,곤산부적합수량_7월,
                    곤산부적합수량_8월,곤산부적합수량_9월,곤산부적합수량_10월,곤산부적합수량_11월,곤산부적합수량_12월,곤산부적합수량_합계]

########################################################################################
##################곤산공정검사월별집계########################################################
conn1 = sqlite3.connect('./db/qms_kunshan.db')
공정검사현황_곤산 = pd.read_sql("SELECT * FROM 곤산_공정검사현황;",conn1,index_col='index')

곤산공정검사수량_1월 = 공정검사현황_곤산.query("일자.str.contains('2023.01.')")
곤산공정검사수량_1월 = int(곤산공정검사수량_1월['검사수량'].sum())
곤산공정검사수량_2월 = 공정검사현황_곤산.query("일자.str.contains('2023.02.')")
곤산공정검사수량_2월 = int(곤산공정검사수량_2월['검사수량'].sum())
곤산공정검사수량_3월 = 공정검사현황_곤산.query("일자.str.contains('2023.03.')")
곤산공정검사수량_3월 = int(곤산공정검사수량_3월['검사수량'].sum())
곤산공정검사수량_4월 = 공정검사현황_곤산.query("일자.str.contains('2023.04.')")
곤산공정검사수량_4월 = int(곤산공정검사수량_4월['검사수량'].sum())
곤산공정검사수량_5월 = 공정검사현황_곤산.query("일자.str.contains('2023.05.')")
곤산공정검사수량_5월 = int(곤산공정검사수량_5월['검사수량'].sum())
곤산공정검사수량_6월 = 공정검사현황_곤산.query("일자.str.contains('2023.06.')")
곤산공정검사수량_6월 = int(곤산공정검사수량_6월['검사수량'].sum())
곤산공정검사수량_7월 = 공정검사현황_곤산.query("일자.str.contains('2023.07.')")
곤산공정검사수량_7월 = int(곤산공정검사수량_7월['검사수량'].sum())
곤산공정검사수량_8월 = 공정검사현황_곤산.query("일자.str.contains('2023.08.')")
곤산공정검사수량_8월 = int(곤산공정검사수량_8월['검사수량'].sum())
곤산공정검사수량_9월 = 공정검사현황_곤산.query("일자.str.contains('2023.09.')")
곤산공정검사수량_9월 = int(곤산공정검사수량_9월['검사수량'].sum())
곤산공정검사수량_10월 = 공정검사현황_곤산.query("일자.str.contains('2023.10.')")
곤산공정검사수량_10월 = int(곤산공정검사수량_10월['검사수량'].sum())
곤산공정검사수량_11월 = 공정검사현황_곤산.query("일자.str.contains('2023.11.')")
곤산공정검사수량_11월 = int(곤산공정검사수량_11월['검사수량'].sum())
곤산공정검사수량_12월 = 공정검사현황_곤산.query("일자.str.contains('2023.12.')")
곤산공정검사수량_12월 = int(곤산공정검사수량_12월['검사수량'].sum())
곤산공정검사수량_합계 = (곤산공정검사수량_1월+곤산공정검사수량_2월+곤산공정검사수량_3월+곤산공정검사수량_4월+곤산공정검사수량_5월+곤산공정검사수량_6월+
                 곤산공정검사수량_7월+곤산공정검사수량_8월+곤산공정검사수량_9월+곤산공정검사수량_10월+곤산공정검사수량_11월+곤산공정검사수량_12월)

곤산공정검사수량_리스트 = [곤산공정검사수량_1월,곤산공정검사수량_2월,곤산공정검사수량_3월,곤산공정검사수량_4월,곤산공정검사수량_5월,곤산공정검사수량_6월,곤산공정검사수량_7월,
                곤산공정검사수량_8월,곤산공정검사수량_9월,곤산공정검사수량_10월,곤산공정검사수량_11월,곤산공정검사수량_12월,곤산공정검사수량_합계]

#################################################################################################################################
곤산공정부적합수량_1월 = 공정검사현황_곤산.query("일자.str.contains('2023.01.')")
곤산공정부적합수량_1월 = int(곤산공정부적합수량_1월['부적합수량'].sum())
곤산공정부적합수량_2월 = 공정검사현황_곤산.query("일자.str.contains('2023.02.')")
곤산공정부적합수량_2월 = int(곤산공정부적합수량_2월['부적합수량'].sum())
곤산공정부적합수량_3월 = 공정검사현황_곤산.query("일자.str.contains('2023.03.')")
곤산공정부적합수량_3월 = int(곤산공정부적합수량_3월['부적합수량'].sum())
곤산공정부적합수량_4월 = 공정검사현황_곤산.query("일자.str.contains('2023.04.')")
곤산공정부적합수량_4월 = int(곤산공정부적합수량_4월['부적합수량'].sum())
곤산공정부적합수량_5월 = 공정검사현황_곤산.query("일자.str.contains('2023.05.')")
곤산공정부적합수량_5월 = int(곤산공정부적합수량_5월['부적합수량'].sum())
곤산공정부적합수량_6월 = 공정검사현황_곤산.query("일자.str.contains('2023.06.')")
곤산공정부적합수량_6월 = int(곤산공정부적합수량_6월['부적합수량'].sum())
곤산공정부적합수량_7월 = 공정검사현황_곤산.query("일자.str.contains('2023.07.')")
곤산공정부적합수량_7월 = int(곤산공정부적합수량_7월['부적합수량'].sum())
곤산공정부적합수량_8월 = 공정검사현황_곤산.query("일자.str.contains('2023.08.')")
곤산공정부적합수량_8월 = int(곤산공정부적합수량_8월['부적합수량'].sum())
곤산공정부적합수량_9월 = 공정검사현황_곤산.query("일자.str.contains('2023.09.')")
곤산공정부적합수량_9월 = int(곤산공정부적합수량_9월['부적합수량'].sum())
곤산공정부적합수량_10월 = 공정검사현황_곤산.query("일자.str.contains('2023.10.')")
곤산공정부적합수량_10월 = int(곤산공정부적합수량_10월['부적합수량'].sum())
곤산공정부적합수량_11월 = 공정검사현황_곤산.query("일자.str.contains('2023.11.')")
곤산공정부적합수량_11월 = int(곤산공정부적합수량_11월['부적합수량'].sum())
곤산공정부적합수량_12월 = 공정검사현황_곤산.query("일자.str.contains('2023.12.')")
곤산공정부적합수량_12월 = int(곤산공정부적합수량_12월['부적합수량'].sum())
곤산공정부적합수량_합계 = (곤산공정부적합수량_1월+곤산공정부적합수량_2월+곤산공정부적합수량_3월+곤산공정부적합수량_4월+곤산공정부적합수량_5월+곤산공정부적합수량_6월+곤산공정부적합수량_7월+
                    곤산공정부적합수량_8월+곤산공정부적합수량_9월+곤산공정부적합수량_10월+곤산공정부적합수량_11월+곤산공정부적합수량_12월)

곤산공정부적합수량_리스트 = [곤산공정부적합수량_1월,곤산공정부적합수량_2월,곤산공정부적합수량_3월,곤산공정부적합수량_4월,곤산공정부적합수량_5월,곤산공정부적합수량_6월,곤산공정부적합수량_7월,
                    곤산공정부적합수량_8월,곤산공정부적합수량_9월,곤산공정부적합수량_10월,곤산공정부적합수량_11월,곤산공정부적합수량_12월,곤산공정부적합수량_합계]

########################################################################################
##################곤산출하검사월별집계########################################################
conn1 = sqlite3.connect('./db/qms_kunshan.db')
출하검사현황_곤산 = pd.read_sql("SELECT * FROM 곤산_출하검사현황;",conn1,index_col='index')

곤산출하검사수량_1월 = 출하검사현황_곤산.query("일자.str.contains('2023.01.')")
곤산출하검사수량_1월 = int(곤산출하검사수량_1월['검사수량'].sum())
곤산출하검사수량_2월 = 출하검사현황_곤산.query("일자.str.contains('2023.02.')")
곤산출하검사수량_2월 = int(곤산출하검사수량_2월['검사수량'].sum())
곤산출하검사수량_3월 = 출하검사현황_곤산.query("일자.str.contains('2023.03.')")
곤산출하검사수량_3월 = int(곤산출하검사수량_3월['검사수량'].sum())
곤산출하검사수량_4월 = 출하검사현황_곤산.query("일자.str.contains('2023.04.')")
곤산출하검사수량_4월 = int(곤산출하검사수량_4월['검사수량'].sum())
곤산출하검사수량_5월 = 출하검사현황_곤산.query("일자.str.contains('2023.05.')")
곤산출하검사수량_5월 = int(곤산출하검사수량_5월['검사수량'].sum())
곤산출하검사수량_6월 = 출하검사현황_곤산.query("일자.str.contains('2023.06.')")
곤산출하검사수량_6월 = int(곤산출하검사수량_6월['검사수량'].sum())
곤산출하검사수량_7월 = 출하검사현황_곤산.query("일자.str.contains('2023.07.')")
곤산출하검사수량_7월 = int(곤산출하검사수량_7월['검사수량'].sum())
곤산출하검사수량_8월 = 출하검사현황_곤산.query("일자.str.contains('2023.08.')")
곤산출하검사수량_8월 = int(곤산출하검사수량_8월['검사수량'].sum())
곤산출하검사수량_9월 = 출하검사현황_곤산.query("일자.str.contains('2023.09.')")
곤산출하검사수량_9월 = int(곤산출하검사수량_9월['검사수량'].sum())
곤산출하검사수량_10월 = 출하검사현황_곤산.query("일자.str.contains('2023.10.')")
곤산출하검사수량_10월 = int(곤산출하검사수량_10월['검사수량'].sum())
곤산출하검사수량_11월 = 출하검사현황_곤산.query("일자.str.contains('2023.11.')")
곤산출하검사수량_11월 = int(곤산출하검사수량_11월['검사수량'].sum())
곤산출하검사수량_12월 = 출하검사현황_곤산.query("일자.str.contains('2023.12.')")
곤산출하검사수량_12월 = int(곤산출하검사수량_12월['검사수량'].sum())
곤산출하검사수량_합계 = (곤산출하검사수량_1월+곤산출하검사수량_2월+곤산출하검사수량_3월+곤산출하검사수량_4월+곤산출하검사수량_5월+곤산출하검사수량_6월+
                 곤산출하검사수량_7월+곤산출하검사수량_8월+곤산출하검사수량_9월+곤산출하검사수량_10월+곤산출하검사수량_11월+곤산출하검사수량_12월)

곤산출하검사수량_리스트 = [곤산출하검사수량_1월,곤산출하검사수량_2월,곤산출하검사수량_3월,곤산출하검사수량_4월,곤산출하검사수량_5월,곤산출하검사수량_6월,곤산출하검사수량_7월,
                곤산출하검사수량_8월,곤산출하검사수량_9월,곤산출하검사수량_10월,곤산출하검사수량_11월,곤산출하검사수량_12월,곤산출하검사수량_합계]

#################################################################################################################################
곤산출하부적합수량_1월 = 출하검사현황_곤산.query("일자.str.contains('2023.01.')")
곤산출하부적합수량_1월 = int(곤산출하부적합수량_1월['부적합수량'].sum())
곤산출하부적합수량_2월 = 출하검사현황_곤산.query("일자.str.contains('2023.02.')")
곤산출하부적합수량_2월 = int(곤산출하부적합수량_2월['부적합수량'].sum())
곤산출하부적합수량_3월 = 출하검사현황_곤산.query("일자.str.contains('2023.03.')")
곤산출하부적합수량_3월 = int(곤산출하부적합수량_3월['부적합수량'].sum())
곤산출하부적합수량_4월 = 출하검사현황_곤산.query("일자.str.contains('2023.04.')")
곤산출하부적합수량_4월 = int(곤산출하부적합수량_4월['부적합수량'].sum())
곤산출하부적합수량_5월 = 출하검사현황_곤산.query("일자.str.contains('2023.05.')")
곤산출하부적합수량_5월 = int(곤산출하부적합수량_5월['부적합수량'].sum())
곤산출하부적합수량_6월 = 출하검사현황_곤산.query("일자.str.contains('2023.06.')")
곤산출하부적합수량_6월 = int(곤산출하부적합수량_6월['부적합수량'].sum())
곤산출하부적합수량_7월 = 출하검사현황_곤산.query("일자.str.contains('2023.07.')")
곤산출하부적합수량_7월 = int(곤산출하부적합수량_7월['부적합수량'].sum())
곤산출하부적합수량_8월 = 출하검사현황_곤산.query("일자.str.contains('2023.08.')")
곤산출하부적합수량_8월 = int(곤산출하부적합수량_8월['부적합수량'].sum())
곤산출하부적합수량_9월 = 출하검사현황_곤산.query("일자.str.contains('2023.09.')")
곤산출하부적합수량_9월 = int(곤산출하부적합수량_9월['부적합수량'].sum())
곤산출하부적합수량_10월 = 출하검사현황_곤산.query("일자.str.contains('2023.10.')")
곤산출하부적합수량_10월 = int(곤산출하부적합수량_10월['부적합수량'].sum())
곤산출하부적합수량_11월 = 출하검사현황_곤산.query("일자.str.contains('2023.11.')")
곤산출하부적합수량_11월 = int(곤산출하부적합수량_11월['부적합수량'].sum())
곤산출하부적합수량_12월 = 출하검사현황_곤산.query("일자.str.contains('2023.12.')")
곤산출하부적합수량_12월 = int(곤산출하부적합수량_12월['부적합수량'].sum())
곤산출하부적합수량_합계 = (곤산출하부적합수량_1월+곤산출하부적합수량_2월+곤산출하부적합수량_3월+곤산출하부적합수량_4월+곤산출하부적합수량_5월+곤산출하부적합수량_6월+곤산출하부적합수량_7월+
                    곤산출하부적합수량_8월+곤산출하부적합수량_9월+곤산출하부적합수량_10월+곤산출하부적합수량_11월+곤산출하부적합수량_12월)

곤산출하부적합수량_리스트 = [곤산출하부적합수량_1월,곤산출하부적합수량_2월,곤산출하부적합수량_3월,곤산출하부적합수량_4월,곤산출하부적합수량_5월,곤산출하부적합수량_6월,곤산출하부적합수량_7월,
                    곤산출하부적합수량_8월,곤산출하부적합수량_9월,곤산출하부적합수량_10월,곤산출하부적합수량_11월,곤산출하부적합수량_12월,곤산출하부적합수량_합계]

########################################################################################
#################################################################################################################################
st.markdown("""
        <style>
               .block-container {
                    padding-top: 2rem;
                    padding-bottom: 1rem;
                    padding-left: 1rem;
                    padding-right: 0rem;
                }
        </style>
        """, unsafe_allow_html=True)

st.sidebar.markdown('<h1><div style="text-align: center;">😃COMESYS QMS Web App</div></h1>', unsafe_allow_html=True)
st.sidebar.markdown('<h1><div style="text-align: center;">☀️2023년 품질 방침☀️</div></h1>', unsafe_allow_html=True)
st.sidebar.markdown('<h2><div style="text-align: center;">🏳️‍🌈전사적인 품질 혁신을 통한 Zero Defect 달성</div></h2>', unsafe_allow_html=True)
st.sidebar.image("./image/1.png", width=300)
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10 = st.tabs(["💙🇰🇷한국본사", "💗🇨🇳중국곤산","📅일자별검색","📆기간별검색","🛰️고객사별검색","👆품목별검색","🌀클레임분석자료",'🌈INFORMATION','📋게시판','🎥동영상'])

with tab1:
	col7, col8, col9 = st.columns(3)
	with col7:
		fig7 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig7.add_trace(go.Bar(x=x, y=검사수량_리스트,text = 검사수량_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='검사수량',yaxis="y2"))
		fig7.add_trace(go.Scatter(x=x, y=부적합수량_리스트,text = 부적합수량_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합수량',line=dict(color="#f55f5f")))

		fig7.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[-(부적합수량_리스트[-1]*2),부적합수량_리스트[-1]*2]
			),
			yaxis2=dict(
				side="right",
				overlaying="y",
				tickmode="sync",
				range=[0,검사수량_리스트[-1]*2]
			),
		)

		fig7.update_traces(texttemplate='%{text:,}')

		fig7.update_layout(title_text="♊수입검사 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig7.update_xaxes(nticks=14)

		fig7.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig7, use_container_width=True)

	with col8:
		fig8 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig8.add_trace(go.Bar(x=x, y=공정검사수량_리스트,text = 공정검사수량_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='검사수량',yaxis="y2"))
		fig8.add_trace(go.Scatter(x=x, y=공정부적합수량_리스트,text = 공정부적합수량_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합수량',line=dict(color="#FF7D00")))

		fig8.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[-(공정부적합수량_리스트[-1]*2),공정부적합수량_리스트[-1]*2]
			),
			yaxis2=dict(
				side="right",
				overlaying="y",
				tickmode="sync",
				range=[0,공정검사수량_리스트[-1]*2]
			),
		)

		fig8.update_traces(texttemplate='%{text:,}')

		fig8.update_layout(title_text="♋공정검사 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig8.update_xaxes(nticks=14)

		fig8.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig8, use_container_width=True)

	with col9:
		fig9 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig9.add_trace(go.Bar(x=x, y=출하검사수량_리스트,text = 출하검사수량_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='검사수량',yaxis="y2"))
		fig9.add_trace(go.Scatter(x=x, y=출하부적합수량_리스트,text = 출하부적합수량_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합수량',line=dict(color="#FFFF00")))

		fig9.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[-(출하부적합수량_리스트[-1]*2),출하부적합수량_리스트[-1]*2]
			),
			yaxis2=dict(
				side="right",
				overlaying="y",
				tickmode="sync",
				range=[0,출하검사수량_리스트[-1]*2]
			),
		)

		fig9.update_traces(texttemplate='%{text:,}')

		fig9.update_layout(title_text="♌출하검사 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig9.update_xaxes(nticks=14)

		fig9.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig9, use_container_width=True)

	col10, col11, col12 = st.columns(3)
	with col10:
		fig10 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig10 = go.Figure(go.Scatter(x=x, y=인라인부적합수량_리스트,text = 인라인부적합수량_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합수량',line=dict(color="#00FF00")))

		fig10.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[0,인라인부적합수량_리스트[-1]*2]
			),
		)

		fig10.update_traces(texttemplate='%{text:,}')

		fig10.update_layout(title_text="♍고객사 라인 부적합 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig10.update_xaxes(nticks=14)

		fig10.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig10, use_container_width=True)

	with col11:
		fig11 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig11.add_trace(go.Bar(x=x, y=필드클레임비용_리스트,text = 필드클레임비용_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='클레임비용',yaxis="y2"))
		fig11.add_trace(go.Scatter(x=x, y=필드클레임_리스트,text = 필드클레임_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='발생건수',line=dict(color="#00FFFF")))

		fig11.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[-(필드클레임_리스트[-1]*2),필드클레임_리스트[-1]*2]
			),
			yaxis2=dict(
				side="right",
				overlaying="y",
				tickmode="sync",
				range=[0,필드클레임비용_리스트[-1]*2]
			),
		)

		fig11.update_traces(texttemplate='%{text:,}')

		fig11.update_layout(title_text="♎필드 클레임 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig11.update_xaxes(nticks=14)

		fig11.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig11, use_container_width=True)

	with col12:
		fig12 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig12.add_trace(go.Bar(x=x, y=고객불만비용_리스트,text = 고객불만비용_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='QCOST비용',yaxis="y2"))
		fig12.add_trace(go.Scatter(x=x, y=고객불만건수_리스트,text = 고객불만건수_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='발생건수',line=dict(color="#FF00FF")))

		fig12.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[-(고객불만건수_리스트[-1]*2),고객불만건수_리스트[-1]*2]
			),
			yaxis2=dict(
				side="right",
				overlaying="y",
				tickmode="sync",
				range=[0,고객불만비용_리스트[-1]*2]
			),
		)

		fig12.update_traces(texttemplate='%{text:,}')

		fig12.update_layout(title_text="♏Q COST 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig12.update_xaxes(nticks=14)

		fig12.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig12, use_container_width=True)

	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)
	col1, col2, col3, col4, col5, col6 = st.columns([0.65,0.65,0.65,0.65,0.65,0.65])

	with col1:
		st.markdown("<h6 style='text-align: center; '>1️⃣수입 검사 현황</h6>", unsafe_allow_html=True)
		st.markdown("<h3 style='text-align: center; '>"+str(수입검사부적합합계_2023)+'/'+str(수입검사_불량수량_2023년)+"</h3>", unsafe_allow_html=True)
		option = {
		"series": [{
			"type": 'gauge',
			"startAngle": 180,
			"endAngle": 0,
			"progress": {
				"show": "true"
			},
			"radius":'85%', 

			"itemStyle": {
				"color": '#f55f5f',
				"shadowColor": '#888888',
				"shadowBlur": 10,
			},
			"progress": {
				"show": "true",
				"roundCap": "true",
				"width": 10
			},
			"pointer": {
				"length": '60%',
				"width": 7,
				"offsetCenter": [0, '5%']
			},
			"detail": {
				"formatter": '{value} %',
			},
			"data": [{
				"value": 수입검사부적합진행_2023,
			}]
		}]
	};
		st_echarts(options=option, key="1")

	with col2:
		st.markdown("<h6 style='text-align: center; '>2️⃣공정 검사 현황</h6>", unsafe_allow_html=True)
		st.markdown("<h3 style='text-align: center; '>"+str(공정검사부적합합계_2023)+'/'+str(공정검사_불량수량_2023년)+"</h3>", unsafe_allow_html=True) 
		option = {
		"series": [{
			"type": 'gauge',
			"startAngle": 180,
			"endAngle": 0,
			"progress": {
				"show": "false"
			},
			"radius":'85%', 

			"itemStyle": {
				"color": '#FF7D00',
				"shadowColor": '#888888',
				"shadowBlur": 10,
				# "radius": '55%',
			},
			"progress": {
				"show": "true",
				"roundCap": "true",
				"width": 10
			},
			"pointer": {
				"length": '60%',
				"width": 7,
				"offsetCenter": [0, '5%']
			},
			"detail": {
				"formatter": '{value} %',
			},
			"data": [{
				"value": 공정검사부적합진행_2023,
			}]
		}]
	};
		st_echarts(options=option, key="2")

	with col3:
		st.markdown("<h6 style='text-align: center; '>3️⃣출하 검사 현황</h6>", unsafe_allow_html=True)
		st.markdown("<h3 style='text-align: center; '>"+str(출하검사부적합합계_2023)+'/'+str(출하검사_불량수량_2023년)+"</h3>", unsafe_allow_html=True) 
		option = {
		"series": [{
			"type": 'gauge',
			"startAngle": 180,
			"endAngle": 0,
			"progress": {
				"show": "false"
			},
			"radius":'85%', 

			"itemStyle": {
				"color": '#FFFF00',
				"shadowColor": '#888888',
				"shadowBlur": 10,
				# "radius": '55%',
			},
			"progress": {
				"show": "true",
				"roundCap": "true",
				"width": 10
			},
			"pointer": {
				"length": '60%',
				"width": 7,
				"offsetCenter": [0, '5%']
			},
			"detail": {
				"formatter": '{value} %',
			},
			"data": [{
				"value": 출하검사부적합진행_2023,
			}]
		}]
	};
		st_echarts(options=option, key="3")

	with col4:
		st.markdown("<h6 style='text-align: center; '>4️⃣고객사 라인 불만 건수</h6>", unsafe_allow_html=True)
		st.markdown("<h3 style='text-align: center; '>"+str(고객사라인부적합현황합계_2023)+'/'+str(고객사라인불만건수_2023년)+"</h3>", unsafe_allow_html=True) 
		option = {
		"series": [{
			"type": 'gauge',
			"startAngle": 180,
			"endAngle": 0,
			"progress": {
				"show": "false"
			},
			"radius":'85%', 

			"itemStyle": {
				"color": '#00FF00',
				"shadowColor": '#888888',
				"shadowBlur": 10,
				# "radius": '55%',
			},
			"progress": {
				"show": "true",
				"roundCap": "true",
				"width": 10
			},
			"pointer": {
				"length": '60%',
				"width": 7,
				"offsetCenter": [0, '5%']
			},
			"detail": {
				"formatter": '{value} %',
			},
			"data": [{
				"value": 고객사라인부적합진행_2023,
			}]
		}]
	};
		st_echarts(options=option, key="4")

	with col5:
		st.markdown("<h6 style='text-align: center; '>5️⃣필드 클레임 비용(단위:천원)</h6>", unsafe_allow_html=True)
		st.markdown("<h3 style='text-align: center; '>"+str(필드클레임현황합계_2023_comma)+'/'+str(필드클레임목표금액_2023년_comma)+"</h3>", unsafe_allow_html=True) 
		option = {
		"series": [{
			"type": 'gauge',
			"startAngle": 180,
			"endAngle": 0,
			"progress": {
				"show": "false"
			},
			"radius":'85%', 

			"itemStyle": {
				"color": '#00FFFF',
				"shadowColor": '#888888',
				"shadowBlur": 10,
				# "radius": '55%',
			},
			"progress": {
				"show": "true",
				"roundCap": "true",
				"width": 10
			},
			"pointer": {
				"length": '60%',
				"width": 7,
				"offsetCenter": [0, '5%']
			},
			"detail": {
				"formatter": '{value} %',
			},
			"data": [{
				"value": 필드클레임현황진행_2023,
			}]
		}]
	};
		st_echarts(options=option, key="5")

	with col6:
		st.markdown("<h6 style='text-align: center; '>6️⃣Q COST현황(단위:천원)</h6>", unsafe_allow_html=True)
		st.markdown("<h3 style='text-align: center; '>"+str(QCOST현황합계_2023_comma)+'/'+str(Q_Cost_2023년_comma)+"</h3>", unsafe_allow_html=True) 
		option = {
		"series": [{
			"type": 'gauge',
			"startAngle": 180,
			"endAngle": 0,
			"progress": {
				"show": "false"
			},
			"radius":'85%', 

			"itemStyle": {
				"color": '#FF00FF',
				"shadowColor": '#888888',
				"shadowBlur": 10,
				# "radius": '55%',
			},
			"progress": {
				"show": "true",
				"roundCap": "true",
				"width": 10
			},
			"pointer": {
				"length": '60%',
				"width": 7,
				"offsetCenter": [0, '5%']
			},
			"detail": {
				"formatter": '{value} %',
			},
			"data": [{
				"value": QCOST현황진행_2023,
			}]
		}]
	};
		st_echarts(options=option, key="6")

with tab2:
	col13, col14, col15 = st.columns(3)
	with col13:
		fig19 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig19.add_trace(go.Bar(x=x, y=곤산검사수량_리스트,text = 곤산검사수량_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='검사수량',yaxis="y2"))
		fig19.add_trace(go.Scatter(x=x, y=곤산부적합수량_리스트,text = 곤산부적합수량_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합수량',line=dict(color="#f55f5f")))

		fig19.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[-(곤산부적합수량_리스트[-1]*2),곤산부적합수량_리스트[-1]*2]
			),
			yaxis2=dict(
				side="right",
				overlaying="y",
				tickmode="sync",
				range=[0,곤산검사수량_리스트[-1]*2]
			),
		)

		fig19.update_traces(texttemplate='%{text:,}')

		fig19.update_layout(title_text="♊곤산 수입검사 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig19.update_xaxes(nticks=14)

		fig19.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig19, use_container_width=True)

	with col14:
		fig20 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig20.add_trace(go.Bar(x=x, y=곤산공정검사수량_리스트,text = 곤산공정검사수량_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='검사수량',yaxis="y2"))
		fig20.add_trace(go.Scatter(x=x, y=곤산공정부적합수량_리스트,text = 곤산공정부적합수량_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합수량',line=dict(color="#f55f5f")))

		fig20.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[-(곤산공정부적합수량_리스트[-1]*2),곤산공정부적합수량_리스트[-1]*2]
			),
			yaxis2=dict(
				side="right",
				overlaying="y",
				tickmode="sync",
				range=[0,곤산공정검사수량_리스트[-1]*2]
			),
		)

		fig20.update_traces(texttemplate='%{text:,}')

		fig20.update_layout(title_text="♋곤산 공정검사 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig20.update_xaxes(nticks=14)

		fig20.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig20, use_container_width=True)

	with col15:
		fig21 = go.Figure()
		pio.templates.default = "plotly_dark"
		colors = list(range(14))
		x= ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월','합계']
		fig21.add_trace(go.Bar(x=x, y=곤산출하검사수량_리스트,text = 곤산출하검사수량_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='검사수량',yaxis="y2"))
		fig21.add_trace(go.Scatter(x=x, y=곤산출하부적합수량_리스트,text = 곤산출하부적합수량_리스트,mode='lines+markers+text',textposition='top center',marker_size=5,
								marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합수량',line=dict(color="#f55f5f")))

		fig21.update_layout(
			legend_yanchor="top",
			legend_y=1.12,
			legend_xanchor="left",
			legend_x=0.65,
			yaxis=dict(
				range=[-(곤산출하부적합수량_리스트[-1]*2),곤산출하부적합수량_리스트[-1]*2]
			),
			yaxis2=dict(
				side="right",
				overlaying="y",
				tickmode="sync",
				range=[0,곤산출하검사수량_리스트[-1]*2]
			),
		)

		fig21.update_traces(texttemplate='%{text:,}')

		fig21.update_layout(title_text="♌곤산 출하검사 월별 현황",
							title_x = 0.4,
							title_y = 0.82,
							title_xanchor = "center",
							title_yanchor = "middle")
		
		fig21.update_xaxes(nticks=14)

		fig21.update_layout(
			width=500,
			height=220,
			margin_l=10,
			margin_r=10,
			margin_b=10,
			margin_t=10,
		)
	
		st.plotly_chart(fig21, use_container_width=True)

	곤산고품발생 = pd.read_sql("SELECT * FROM 곤산_고품관리;",conn1,index_col='index')
	곤산고품발생_품번 = 곤산고품발생['品名품명'].drop_duplicates().sort_values().to_list()

	interval_time = st.slider(
	"♍ 기간별 고품 발생 현황",
	min_value=datetime(2020, 1, 1), 
	max_value=datetime(2023, 12, 31),
	value=(datetime(2020, 1,1),datetime(2023, 12, 31)),
	format="YYYY/MM",key='slider_7')
	start_time = interval_time[0].strftime('%Y.%m')
	finish_time = interval_time[1].strftime('%Y.%m')

	곤산고품_기간별현황 = 곤산고품발생[곤산고품발생['接收日접수일'].between(start_time, finish_time)]
	곤산고품_기간별현황_리스트 = []
	for i in range(len(곤산고품발생_품번)):
		곤산고품_기간별_품목수량 = 곤산고품_기간별현황.query("品名품명 == " +"'" + 곤산고품발생_품번[i] + "'"+ "")
		곤산고품_기간별_품목수량 = len(곤산고품_기간별_품목수량['接收日접수일'])
		곤산고품_기간별현황_리스트.append(곤산고품_기간별_품목수량)
	st.markdown('총 발생수량 : '+str(sum(곤산고품_기간별현황_리스트)))
	fig22 = go.Figure()
	pio.templates.default = "plotly_dark"
	colors = list(range(42))
	x= 곤산고품발생_품번
	fig22 = go.Figure(go.Bar(x=x, y=곤산고품_기간별현황_리스트,text = 곤산고품_기간별현황_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='발생수량'))

	fig22.update_layout(
		legend_yanchor="top",
		legend_y=1.12,
		legend_xanchor="left",
		legend_x=0.65,
		yaxis=dict(
			range=[0,max(곤산고품_기간별현황_리스트)]
		),
	)

	fig22.update_traces(texttemplate='%{text:,}')
	
	fig22.update_xaxes(nticks=42)

	fig22.update_layout(
		width=100,
		height=140,
		margin_l=10,
		margin_r=10,
		margin_b=10,
		margin_t=10,
	)
	st.plotly_chart(fig22, use_container_width=True)

	곤산클레임발생 = pd.read_sql("SELECT * FROM 곤산_클레임비용현황;",conn1,index_col='index')
	곤산클레임발생_품번 = 곤산클레임발생['PARTNO'].drop_duplicates().sort_values().to_list()

	interval_time = st.slider(
	"♎ 기간별 클레임 비용 발생 현황",
	min_value=datetime(2022, 1, 1), 
	max_value=datetime(2023, 12, 31),
	value=(datetime(2022, 1,1),datetime(2023, 12, 31)),
	format="YYYY/MM",key='slider_8')
	start_time = interval_time[0].strftime('%Y.%m')
	finish_time = interval_time[1].strftime('%Y.%m')

	곤산클레임_기간별현황 = 곤산클레임발생[곤산클레임발생['일자'].between(start_time, finish_time)]
	곤산클레임_기간별현황_리스트 = []
	for i in range(len(곤산클레임발생_품번)):
		곤산클레임_기간별_품목수량 = 곤산클레임_기간별현황.query("PARTNO == " +"'" + 곤산클레임발생_품번[i] + "'"+ "")
		곤산클레임_기간별_품목수량 = (곤산클레임_기간별_품목수량['청구금액'].sum())
		곤산클레임_기간별현황_리스트.append(곤산클레임_기간별_품목수량)
	st.markdown('총 클레임 발생 금액(CNY) : '+format((sum(곤산클레임_기간별현황_리스트)),','))
	fig23 = go.Figure()
	pio.templates.default = "plotly_dark"
	colors = list(range(24))
	x= 곤산클레임발생_품번
	fig23 = go.Figure(go.Bar(x=x, y=곤산클레임_기간별현황_리스트,text = 곤산클레임_기간별현황_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='발생수량'))

	fig23.update_layout(
		legend_yanchor="top",
		legend_y=1.12,
		legend_xanchor="left",
		legend_x=0.65,
		yaxis=dict(
			range=[0,max(곤산클레임_기간별현황_리스트)]
		),
	)

	fig23.update_traces(texttemplate='%{text:,}')
	
	fig23.update_xaxes(nticks=42)

	fig23.update_layout(
		width=100,
		height=140,
		margin_l=10,
		margin_r=10,
		margin_b=10,
		margin_t=10,
	)
	st.plotly_chart(fig23, use_container_width=True)

with tab3:
	today = datetime.now()
	tomorrow = datetime.today() + timedelta(1)
	yesterday = datetime.today() - timedelta(1)
	검색일 = st.date_input("검색일",yesterday)
	검색일_str = 검색일.strftime('%Y.%m.%d')

	수입검사_일일현황 = 수입검사현황.query("일자.str.contains('"+검색일_str+"')")
	공정검사_일일현황 = 공정검사현황.query("일자.str.contains('"+검색일_str+"')")
	출하검사_일일현황 = 출하검사현황.query("일자.str.contains('"+검색일_str+"')")
	고객사라인부적합_일일현황 = 고객사라인부적합현황.query("일자.str.contains('"+검색일_str+"')")
	필드클레임_일일현황 = 필드클레임현황.query("일자.str.contains('"+검색일_str+"')")
	QCOST_일일현황 = QCOST현황.query("일자.str.contains('"+검색일_str+"')")

	일일현황_데이터프레임 = pd.concat([수입검사_일일현황,공정검사_일일현황,출하검사_일일현황])
	일일현황_데이터프레임 = 일일현황_데이터프레임.drop(['일자','기타','협력사','year','검사일자'],axis=1)
	일일현황_데이터프레임 = 일일현황_데이터프레임.dropna(subset='부적합수량')

	일일검사현황_데이터프레임 = pd.concat([수입검사_일일현황,공정검사_일일현황,출하검사_일일현황])
	일일클레임현황_데이터프레임 = pd.concat([고객사라인부적합_일일현황,필드클레임_일일현황,QCOST_일일현황])
	일일클레임현황_데이터프레임 = 일일클레임현황_데이터프레임.drop(['Unnamed: 9','Unnamed: 10','Unnamed: 11','Unnamed: 12'],axis=1)

	수입검사_일일현황_검사수량 = int(수입검사_일일현황['검사수량'].sum())
	수입검사_일일현황_부적합수량 = int(수입검사_일일현황['부적합수량'].sum())
	공정검사_일일현황_검사수량 = int(공정검사_일일현황['검사수량'].sum())
	공정검사_일일현황_부적합수량 = int(공정검사_일일현황['부적합수량'].sum())
	출하검사_일일현황_검사수량 = int(출하검사_일일현황['검사수량'].astype(float, errors = 'raise').sum())
	출하검사_일일현황_부적합수량 = int(출하검사_일일현황['부적합수량'].sum())

	일일현황_부적합수량 = [수입검사_일일현황_부적합수량,공정검사_일일현황_부적합수량,출하검사_일일현황_부적합수량,len(일일클레임현황_데이터프레임)]
	일일현황_검사수량 = [수입검사_일일현황_검사수량,공정검사_일일현황_검사수량,출하검사_일일현황_검사수량]

	st.markdown("""
			<style>
				.block-container {
						padding-top: 2rem;
						padding-bottom: 1rem;
						padding-left: 1rem;
						padding-right: 0rem;
					}
			</style>
			""", unsafe_allow_html=True)
	
	fig13 = go.Figure()
	pio.templates.default = "plotly_dark"
	colors = list(range(4))
	x= ['수입검사','공정검사','출하검사','클레임 접수현황']
	fig13.add_trace(go.Bar(x=x, y=일일현황_검사수량,text = 일일현황_검사수량,marker=dict(color=colors),opacity=1, textposition='auto',name='검사수량',yaxis="y2"))
	fig13.add_trace(go.Scatter(x=x, y=일일현황_부적합수량,text = 일일현황_부적합수량,mode='lines+markers+text',textposition='top center',marker_size=8,
							marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합건수',line=dict(color="#ff0000")))

	fig13.update_layout(
		legend_yanchor="top",
		legend_y=1.1,
		legend_xanchor="left",
		legend_x=0.1,
		yaxis=dict(
			range=[-(max(일일현황_부적합수량)*2),max(일일현황_부적합수량)*2]
		),
		yaxis2=dict(
			side="right",
			overlaying="y",
			tickmode="sync",
			range=[0,max(일일현황_검사수량)*2]
		),
	)

	fig13.update_traces(texttemplate='%{text:,}')

	fig13.update_layout(
		width=500,
		height=220,
		margin_l=10,
		margin_r=10,
		margin_b=10,
		margin_t=10,
	)

	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)	
	st.plotly_chart(fig13, use_container_width=True)
	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)

	st.markdown('<h4><div style="text-align: left;">📋일일현황정리(부적합 발생분)</div></h4>', unsafe_allow_html=True)
	st.dataframe(일일현황_데이터프레임, 1800,140)
	st.markdown('<h4><div style="text-align: left;">🅰️일일검사현황</div></h4>', unsafe_allow_html=True)
	st.dataframe(일일검사현황_데이터프레임, 1800,300)
	st.markdown('<h4><div style="text-align: left;">🅱️일일클레임현황</div></h4>', unsafe_allow_html=True)
	st.dataframe(일일클레임현황_데이터프레임, 1800,300)

with tab4:
	today = datetime.now()
	tomorrow = datetime.today() + timedelta(1)
	yesterday = datetime.today() - timedelta(1)
	before_1week = datetime.today() - timedelta(7)
	start_date = st.date_input("Start Date",before_1week)
	start_date_str = start_date.strftime('%Y.%m.%d')
	finish_date = st.date_input("Finish Date",yesterday)
	finish_date_str = finish_date.strftime('%Y.%m.%d')

	수입검사_기간별현황 = 수입검사현황[수입검사현황['일자'].between(start_date_str, finish_date_str)]
	공정검사_기간별현황 = 공정검사현황[공정검사현황['일자'].between(start_date_str, finish_date_str)]
	출하검사_기간별현황 = 출하검사현황[출하검사현황['일자'].between(start_date_str, finish_date_str)]
	고객사라인부적합_기간별현황 = 고객사라인부적합현황[고객사라인부적합현황['일자'].between(start_date_str, finish_date_str)]
	필드클레임_기간별현황 = 필드클레임현황[필드클레임현황['일자'].between(start_date_str, finish_date_str)]
	QCOST_기간별현황 = QCOST현황[QCOST현황['일자'].between(start_date_str, finish_date_str)]

	기간별현황_데이터프레임 = pd.concat([수입검사_기간별현황,공정검사_기간별현황,출하검사_기간별현황])
	기간별현황_데이터프레임 = 기간별현황_데이터프레임.drop(['일자','기타','협력사','year','검사일자'],axis=1)
	기간별현황_데이터프레임 = 기간별현황_데이터프레임.dropna(subset='부적합수량')

	기간별검사현황_데이터프레임 = pd.concat([수입검사_기간별현황,공정검사_기간별현황,출하검사_기간별현황])
	기간별클레임현황_데이터프레임 = pd.concat([고객사라인부적합_기간별현황,필드클레임_기간별현황,QCOST_기간별현황])
	기간별클레임현황_데이터프레임 = 기간별클레임현황_데이터프레임.drop(['Unnamed: 9','Unnamed: 10','Unnamed: 11','Unnamed: 12'],axis=1)

	수입검사_기간별현황_검사수량 = int(수입검사_기간별현황['검사수량'].sum())
	수입검사_기간별현황_부적합수량 = int(수입검사_기간별현황['부적합수량'].sum())
	공정검사_기간별현황_검사수량 = int(공정검사_기간별현황['검사수량'].sum())
	공정검사_기간별현황_부적합수량 = int(공정검사_기간별현황['부적합수량'].sum())
	출하검사_기간별현황_검사수량 = int(출하검사_기간별현황['검사수량'].astype(float, errors = 'raise').sum())
	출하검사_기간별현황_부적합수량 = int(출하검사_기간별현황['부적합수량'].sum())

	기간별현황_부적합수량 = [수입검사_기간별현황_부적합수량,공정검사_기간별현황_부적합수량,출하검사_기간별현황_부적합수량,len(기간별클레임현황_데이터프레임)]
	기간별현황_검사수량 = [수입검사_기간별현황_검사수량,공정검사_기간별현황_검사수량,출하검사_기간별현황_검사수량]

	st.markdown("""
			<style>
				.block-container {
						padding-top: 2rem;
						padding-bottom: 1rem;
						padding-left: 1rem;
						padding-right: 0rem;
					}
			</style>
			""", unsafe_allow_html=True)
	
	fig14 = go.Figure()
	pio.templates.default = "plotly_dark"
	colors = list(range(4))
	x= ['수입검사','공정검사','출하검사','클레임 접수현황']
	fig14.add_trace(go.Bar(x=x, y=기간별현황_검사수량,text = 기간별현황_검사수량,marker=dict(color=colors),opacity=1, textposition='auto',name='검사수량',yaxis="y2"))
	fig14.add_trace(go.Scatter(x=x, y=기간별현황_부적합수량,text = 기간별현황_부적합수량,mode='lines+markers+text',textposition='top center',marker_size=8,
							marker_line_color="DarkSlateGrey",marker_line_width=1,marker_symbol="square",name='부적합건수',line=dict(color="#ff0000")))

	fig14.update_layout(
		legend_yanchor="top",
		legend_y=1.1,
		legend_xanchor="left",
		legend_x=0.1,
		yaxis=dict(
			range=[-(max(기간별현황_부적합수량)*2),max(기간별현황_부적합수량)*2]
		),
		yaxis2=dict(
			side="right",
			overlaying="y",
			tickmode="sync",
			range=[0,max(기간별현황_검사수량)*2]
		),
	)

	fig14.update_traces(texttemplate='%{text:,}')

	fig14.update_layout(
		width=500,
		height=220,
		margin_l=10,
		margin_r=10,
		margin_b=10,
		margin_t=10,
	)

	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)
	st.plotly_chart(fig14, use_container_width=True)
	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)

	st.markdown('<h4><div style="text-align: left;">📋기간별현황정리(부적합 발생분)</div></h4>', unsafe_allow_html=True)
	st.dataframe(기간별현황_데이터프레임, 1800,500)
	st.markdown('<h4><div style="text-align: left;">🅰️기간별검사현황</div></h4>', unsafe_allow_html=True)
	st.dataframe(기간별검사현황_데이터프레임, 1800,300)
	st.markdown('<h4><div style="text-align: left;">🅱️기간별클레임현황</div></h4>', unsafe_allow_html=True)
	st.dataframe(기간별클레임현황_데이터프레임, 1800,300)

with tab5:
	고객사_list_1 = 공정검사현황['고객사'].to_list()
	고객사_list_2 = 출하검사현황['고객사'].to_list()

	고객사_list = list(set(고객사_list_1+고객사_list_2))
	고객사_list = [v for v in 고객사_list if v]

	고객사_list = pd.DataFrame(고객사_list)
	고객사_list.columns = ['고객사']
	고객사_list = 고객사_list['고객사'].sort_values()
	고객사_list = 고객사_list.to_list()

	고객사_리스트 = st.selectbox('고객사선택',고객사_list)

	interval_time = st.slider(
			"검색 기간 선택",
			min_value=datetime(2022, 1, 1), 
			max_value=datetime(2023, 12, 31),
			value=(datetime(2022, 1, 1),datetime(2023, 12, 31)),
			format="YYYY/MM/DD",key='slider_1')
	start_time = interval_time[0].strftime('%Y.%m.%d')
	finish_time = interval_time[1].strftime('%Y.%m.%d')

	공정검사현황_total = pd.read_sql("SELECT * FROM 공정검사현황_2023;",conn,index_col='index')
	공정검사_기간별현황 = 공정검사현황_total[공정검사현황_total['일자'].between(start_time, finish_time)]
	공정검사_기간별현황 = 공정검사_기간별현황[공정검사_기간별현황['고객사'].str.contains(고객사_리스트, na=False)]
	공정검사_기간별현황_검사수량 = format(int(공정검사_기간별현황['검사수량'].sum()),',')
	공정검사_기간별현황_부적합수량 = format(int(공정검사_기간별현황['부적합수량'].sum()),',')

	출하검사현황_total = pd.read_sql("SELECT * FROM 출하검사현황_2023;",conn,index_col='index')
	출하검사_기간별현황 = 출하검사현황_total[출하검사현황_total['일자'].between(start_time, finish_time)]
	출하검사_기간별현황 = 출하검사_기간별현황[출하검사_기간별현황['고객사'].str.contains(고객사_리스트, na=False)]
	출하검사_기간별현황_검사수량 = format(int(출하검사_기간별현황['검사수량'].astype(float, errors = 'raise').sum()),',')
	출하검사_기간별현황_부적합수량 = format(int(출하검사_기간별현황['부적합수량'].sum()),',')

	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)
	st.markdown('🎆총 공정검사 수량 : ' +str(공정검사_기간별현황_검사수량)+'EA')
	st.markdown('🎇총 공정검사 부적합 수량 : ' +str(공정검사_기간별현황_부적합수량)+'EA')
	st.markdown('🎈총 출하검사 수량 : ' +str(출하검사_기간별현황_검사수량)+'EA')
	st.markdown('🎉총 출하검사 부적합 수량 : ' +str(출하검사_기간별현황_부적합수량)+'EA')
	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)

	st.markdown('🎲공정검사_세부내용')
	st.dataframe(공정검사_기간별현황, 1800)
	st.markdown('🎳출하검사_세부내용')
	st.dataframe(출하검사_기간별현황, 1800)

with tab6:
	품번_list_1 = 공정검사현황['품번'].to_list()
	품번_list_2 = 출하검사현황['품번'].to_list()

	품번_list = list(set(품번_list_1+품번_list_2))
	품번_list = [v for v in 품번_list if v]

	품번_list = pd.DataFrame(품번_list)
	품번_list.columns = ['품번']
	품번_list = 품번_list['품번'].sort_values()
	품번_list = 품번_list.to_list()

	품번_리스트 = st.selectbox('품번선택',품번_list)

	interval_time = st.slider(
			"검색 기간 선택",
			min_value=datetime(2022, 1, 1), 
			max_value=datetime(2023, 12, 31),
			value=(datetime(2022, 1, 1),datetime(2023, 12, 31)),
			format="YYYY/MM/DD",key='slider_2')
	start_time = interval_time[0].strftime('%Y.%m.%d')
	finish_time = interval_time[1].strftime('%Y.%m.%d')

	공정검사현황_total = pd.read_sql("SELECT * FROM 공정검사현황_2023;",conn,index_col='index')
	공정검사_품번현황 = 공정검사현황_total[공정검사현황_total['일자'].between(start_time, finish_time)]
	공정검사_품번현황 = 공정검사_품번현황[공정검사_품번현황['품번'].str.contains(품번_리스트, na=False)]
	공정검사_품번현황_검사수량 = format(int(공정검사_품번현황['검사수량'].sum()),',')
	공정검사_품번현황_부적합수량 = format(int(공정검사_품번현황['부적합수량'].sum()),',')
	공정검사_품번현황_부적합내용 = 공정검사_품번현황['부적합내용'].dropna().drop_duplicates().to_list()

	출하검사현황_total = pd.read_sql("SELECT * FROM 출하검사현황_2023;",conn,index_col='index')
	출하검사_품번현황 = 출하검사현황_total[출하검사현황_total['일자'].between(start_time, finish_time)]
	출하검사_품번현황 = 출하검사_품번현황[출하검사_품번현황['품번'].str.contains(품번_리스트, na=False)]
	출하검사_품번현황_검사수량 = format(int(출하검사_품번현황['검사수량'].astype(float, errors = 'raise').sum()),',')
	출하검사_품번현황_부적합수량 = format(int(출하검사_품번현황['부적합수량'].sum()),',')
	출하검사_품번현황_부적합내용 = 출하검사_품번현황['부적합내용'].dropna().drop_duplicates().to_list()

	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)
	st.markdown('🎆총 공정검사 수량 : ' +str(공정검사_품번현황_검사수량)+'EA')
	st.markdown('🎇총 공정검사 부적합 수량 : ' +str(공정검사_품번현황_부적합수량)+'EA')
	original_title1 = '<p style="font-family:Courier; color:red; font-size: 15px;">🛍️공정검사 부적합 내용 : ' + str(공정검사_품번현황_부적합내용)[1:-1]+'</p>'
	st.markdown(original_title1,unsafe_allow_html=True)
	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)
	st.markdown('🎈총 출하검사 수량 : ' +str(출하검사_품번현황_검사수량)+'EA')
	st.markdown('🎉총 출하검사 부적합 수량 : ' +str(출하검사_품번현황_부적합수량)+'EA')
	original_title2 = '<p style="font-family:Courier; color:red; font-size: 15px;">🎯출하검사 부적합 내용 : ' + str(출하검사_품번현황_부적합내용)[1:-1]+'</p>'
	st.markdown(original_title2,unsafe_allow_html=True)

	st.markdown('🎲공정검사_세부내용')
	st.dataframe(공정검사_품번현황, 1800)
	st.markdown('🎳출하검사_세부내용')
	st.dataframe(출하검사_품번현황, 1800)

with tab7:
	JCB필드클레임 = pd.read_sql("SELECT * FROM JCB필드클레임_2023;",conn,index_col='index')
	JCB필드클레임_품번 = JCB필드클레임['컴씨스품번'].drop_duplicates().sort_values().to_list()
	interval_time = st.slider(
			"1️⃣JCB 기간별 필드 클레임 발생",
			min_value=datetime(2022, 1, 1), 
			max_value=datetime(2023, 12, 31),
			value=(datetime(2022, 1,1),datetime(2023, 12, 31)),
			format="YYYY/MM",key='slider_3')
	start_time = interval_time[0].strftime('%Y.%m')
	finish_time = interval_time[1].strftime('%Y.%m')

	JCB_기간별현황 = JCB필드클레임[JCB필드클레임['일자'].between(start_time, finish_time)]
	JCB_기간별현황_리스트 = []
	for i in range(len(JCB필드클레임_품번)):
		JCB_기간별_품목수량 = JCB_기간별현황.query("컴씨스품번 == " +"'" + JCB필드클레임_품번[i] + "'"+ "")
		JCB_기간별_품목수량 = len(JCB_기간별_품목수량['일자'])
		JCB_기간별현황_리스트.append(JCB_기간별_품목수량)

	st.markdown('총 발생수량 : '+str(sum(JCB_기간별현황_리스트)))
	fig15 = go.Figure()
	pio.templates.default = "plotly_dark"
	colors = list(range(10))
	x= JCB필드클레임_품번
	y_text = ['716/C8932','401/C5044','716/C8932','716/C8933','716/C8934','716/C8935','401/C5044','401/C5044','716/C8934']
	fig15 = go.Figure(go.Bar(x=x, y=JCB_기간별현황_리스트,text = JCB_기간별현황_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='클레임수량',width=0.4))

	fig15.update_layout(
		legend_yanchor="top",
		legend_y=1.12,
		legend_xanchor="left",
		legend_x=0.65,
		yaxis=dict(
			range=[0,max(JCB_기간별현황_리스트)]
		),
	)

	fig15.update_traces(texttemplate='%{text:,}')
	
	fig15.update_xaxes(nticks=14)

	fig15.update_layout(
		width=100,
		height=100,
		margin_l=10,
		margin_r=10,
		margin_b=10,
		margin_t=10,
	)
	st.plotly_chart(fig15, use_container_width=True)

	현대건설기계필드클레임_2023 = pd.read_sql("SELECT * FROM 현대건설기계필드클레임_2023;",conn,index_col='index')
	현대건설기계필드클레임_2022 = pd.read_sql("SELECT * FROM 현대건설기계필드클레임_2022;",conn,index_col='index')

	현대건설기계필드클레임_품번_1 = 현대건설기계필드클레임_2022['Request_Part_No'].drop_duplicates().sort_values().to_list()
	현대건설기계필드클레임_품번_2 = 현대건설기계필드클레임_2023['품번'].drop_duplicates().sort_values().to_list()

	interval_time = st.slider(
		"2️⃣현대건설기계 기간별 필드 클레임 발생",
		min_value=datetime(2022, 1, 1), 
		max_value=datetime(2023, 12, 31),
		value=(datetime(2022, 1,1),datetime(2023, 12, 31)),
		format="YYYY/MM",key='slider_4')
	start_time = interval_time[0].strftime('%Y.%m')
	finish_time = interval_time[1].strftime('%Y.%m')
	현대건설기계품번_list = list(set(현대건설기계필드클레임_품번_1+현대건설기계필드클레임_품번_2))
	현대건설기계품번_list = [v for v in 현대건설기계품번_list if v]

	현대건설기계품번_list = pd.DataFrame(현대건설기계품번_list)
	현대건설기계품번_list.columns = ['품번']
	현대건설기계품번_list = 현대건설기계품번_list['품번'].sort_values()
	현대건설기계품번_list = 현대건설기계품번_list.to_list()

	현대건설기계_기간별현황_1 = 현대건설기계필드클레임_2022[현대건설기계필드클레임_2022['Confirmed_Date'].between(start_time, finish_time)]
	현대건설기계_기간별현황_2 = 현대건설기계필드클레임_2023[현대건설기계필드클레임_2023['일자'].between(start_time, finish_time)]

	현대건설기계_기간별현황_리스트 = []
	for i in range(len(현대건설기계품번_list)):
		현대건설기계_기간별_품목수량_1 = 현대건설기계_기간별현황_1.query("Request_Part_No == " +"'" + 현대건설기계품번_list[i] + "'"+ "")
		현대건설기계_기간별_품목수량_2 = 현대건설기계_기간별현황_2.query("품번 == " +"'" + 현대건설기계품번_list[i] + "'"+ "")
		현대건설기계_기간별_품목수량 = (len(현대건설기계_기간별_품목수량_1['Confirmed_Date'])+len(현대건설기계_기간별_품목수량_2['일자']))
		현대건설기계_기간별현황_리스트.append(현대건설기계_기간별_품목수량)

	st.markdown('총 발생수량 : '+str(sum(현대건설기계_기간별현황_리스트)))
	fig16 = go.Figure()
	pio.templates.default = "plotly_dark"
	colors = list(range(21))
	x= 현대건설기계품번_list
	fig16 = go.Figure(go.Bar(x=x, y=현대건설기계_기간별현황_리스트,text = 현대건설기계_기간별현황_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='클레임수량'))

	fig16.update_layout(
		legend_yanchor="top",
		legend_y=1.12,
		legend_xanchor="left",
		legend_x=0.65,
		yaxis=dict(
			range=[0,max(현대건설기계_기간별현황_리스트)]
		),
	)

	fig16.update_traces(texttemplate='%{text:,}')
	
	fig16.update_xaxes(nticks=21)

	fig16.update_layout(
		width=500,
		height=100,
		margin_l=10,
		margin_r=10,
		margin_b=10,
		margin_t=10,
	)
	st.plotly_chart(fig16, use_container_width=True)

	클라크필드클레임 = pd.read_sql("SELECT * FROM 클라크필드클레임_2023;",conn,index_col='index')
	클라크품번_list = 클라크필드클레임['PARTNO'].drop_duplicates().sort_values().to_list()

	interval_time = st.slider(
		"3️⃣클라크 기간별 필드 클레임 발생",
		min_value=datetime(2022, 1, 1), 
		max_value=datetime(2023, 12, 31),
		value=(datetime(2022, 1,1),datetime(2023, 12, 31)),
		format="YYYY/MM",key='slider_5')
	start_time = interval_time[0].strftime('%Y.%m')
	finish_time = interval_time[1].strftime('%Y.%m')

	클라크품번_list = pd.DataFrame(클라크품번_list)
	클라크품번_list.columns = ['품번']
	클라크품번_list = 클라크품번_list['품번'].astype(str).sort_values()
	클라크품번_list = 클라크품번_list.to_list()

	클라크_기간별현황 = 클라크필드클레임[클라크필드클레임['일자'].between(start_time, finish_time)]
	클라크_기간별현황_리스트 = []
	for i in range(len(클라크품번_list)):
		클라크_기간별_품목수량 = 클라크_기간별현황[클라크_기간별현황['PARTNO'].astype(str).str.contains(str(클라크품번_list[i]))]
		클라크_기간별_품목수량 = (len(클라크_기간별_품목수량['일자']))
		클라크_기간별현황_리스트.append(클라크_기간별_품목수량)

	st.markdown('총 발생수량 : '+str(sum(클라크_기간별현황_리스트)))
	fig17 = go.Figure()
	pio.templates.default = "plotly_dark"
	colors = list(range(18))
	x= (클라크품번_list)
	fig17 = go.Figure(go.Bar(x=x, y=클라크_기간별현황_리스트,text = 클라크_기간별현황_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='클레임수량'))

	fig17.update_layout(
		legend_yanchor="top",
		legend_y=1.12,
		legend_xanchor="left",
		legend_x=0.65,
		yaxis=dict(
			range=[0,max(클라크_기간별현황_리스트)]
		),
	)

	fig17.update_traces(texttemplate='%{text:,}')
	
	fig17.update_xaxes(nticks=18)

	fig17.update_layout(
		width=500,
		height=100,
		margin_l=10,
		margin_r=10,
		margin_b=10,
		margin_t=10,
	)
	st.plotly_chart(fig17, use_container_width=True)

	대동필드클레임 = pd.read_sql("SELECT * FROM 대동필드클레임_2023;",conn,index_col='index')
	대동품번_list = 대동필드클레임['PARTNO'].drop_duplicates().sort_values().to_list()

	interval_time = st.slider(
	"4️⃣대동공업 기간별 필드 클레임 발생",
	min_value=datetime(2022, 1, 1), 
	max_value=datetime(2023, 12, 31),
	value=(datetime(2022, 1,1),datetime(2023, 12, 31)),
	format="YYYY/MM",key='slider_6')
	start_time = interval_time[0].strftime('%Y.%m')
	finish_time = interval_time[1].strftime('%Y.%m')

	대동품번_list = pd.DataFrame(대동품번_list)
	대동품번_list.columns = ['품번']
	대동품번_list = 대동품번_list['품번'].sort_values()
	대동품번_list = 대동품번_list.to_list()

	대동_기간별현황 = 대동필드클레임[대동필드클레임['일자'].between(start_time, finish_time)]
	대동_기간별현황_리스트 = []
	for i in range(len(대동품번_list)):
		대동_기간별_품목수량 = 대동_기간별현황[대동_기간별현황['PARTNO'].astype(str).str.contains(str(대동품번_list[i]))]
		대동_기간별_품목수량 = (len(대동_기간별_품목수량['일자']))
		대동_기간별현황_리스트.append(대동_기간별_품목수량)

	st.markdown('총 발생수량 : '+str(sum(대동_기간별현황_리스트)))

	fig18 = go.Figure()
	pio.templates.default = "plotly_dark"
	colors = list(range(3))
	x= (대동품번_list)
	fig18 = go.Figure(go.Bar(x=x, y=대동_기간별현황_리스트,text = 대동_기간별현황_리스트,marker=dict(color=colors),opacity=1, textposition='auto',name='클레임수량',width=0.10))

	fig18.update_layout(
		legend_yanchor="top",
		legend_y=1.12,
		legend_xanchor="left",
		legend_x=0.65,
		yaxis=dict(
			range=[0,max(대동_기간별현황_리스트)]
		),
	)

	fig18.update_traces(texttemplate='%{text:,}')
	
	fig18.update_xaxes(nticks=18)

	fig18.update_layout(
		width=500,
		height=100,
		margin_l=10,
		margin_r=10,
		margin_b=10,
		margin_t=10,
	)
	st.plotly_chart(fig18, use_container_width=True)

with tab8:
	col16, col17 = st.columns([0.8,1])
	with col16:
		ph1 = st.empty()
		# st.subheader(""+datetime.now(gettz('Asia/Seoul')).strftime('%Y년%m월%d일'))
		city_select = st.selectbox('도시 선택',['Busan','Kunshan'])
		API_KEY = "1c3e11985281e02fbe28fad4cdca481d"

		url1=f"http://api.openweathermap.org/data/2.5/weather?q={city_select}&appid={API_KEY}&units={'metric'}"
		response1=requests.get(url1)
		data1=response1.json()

		현재날씨 = data1["weather"][0]["description"]
		현재최감온도 = data1['main']['feels_like']
		현재온도 = data1['main']['temp']
		현재풍속 = data1['wind']['speed']
		현재구름상태 = data1['clouds']['all']
		현재습도 = data1['main']['humidity']
		visibility = format(data1['visibility']/1000,',')
		일출시간 = data1['sys']['sunrise']
		일몰시간 = data1['sys']['sunset']
		일출시간 = datetime.fromtimestamp(일출시간,gettz('Asia/Seoul')).strftime("%Y-%m-%d %H:%M:%S")
		일몰시간 = datetime.fromtimestamp(일몰시간,gettz('Asia/Seoul')).strftime("%Y-%m-%d %H:%M:%S")

		icon_url = "http://openweathermap.org/img/wn/{}@2x.png".format(data1['weather'][0]['icon'])
		현재날씨_image1 = base64.b64encode(request.urlopen(icon_url).read())
		img_1 = Image.open(BytesIO(base64.b64decode(현재날씨_image1)))
		
		if city_select == 'Busan':
			st.subheader(city_select + ', 🇰🇷')
		if city_select == 'Kunshan':
			st.subheader(city_select + ', 🇨🇳')
		col18, col19, col20 = st.columns([0.15,0.2,0.3])
		with col18:
			st.text('')
		with col19:
			st.image(img_1)
		with col20:
			st.text('')
		st.markdown('현재 날씨 : '+ 현재날씨 +'   ;   '+'visibility: '+visibility+'km')
		# st.markdown('체감 온도 : '+str(현재최감온도) +'℃'+'   ;   현재 온도 : '+str(현재온도) +'℃')
		# st.markdown('현재 풍속 : '+str(현재풍속)+'m/sec'+'   ;   구름 상태 : '+str(현재구름상태) +'%'+'   ;   습도 : '+str(현재습도) +'%' )
		st.markdown('일출 시간 : '+str(일출시간) + '   ;   일몰 시간 : '+str(일몰시간))

	with col17:
		url2=f"http://api.openweathermap.org/data/2.5/forecast?q={city_select}&appid={API_KEY}&units={'metric'}"
		response2=requests.get(url2)
		data2=response2.json()

		날짜_리스트 = []
		최저온도_리스트 = []
		최고온도_리스트 = []
		습도_리스트 = []
		풍향_리스트 = []
		날씨_상태 = []
		날씨_img_리스트 = []
		for i in range(len(data2['list'])):
			날짜_리스트.append(data2['list'][i]['dt_txt'])
			최저온도_리스트.append(data2['list'][i]['main']['temp_min'])
			최고온도_리스트.append(data2['list'][i]['main']['temp_max'])
			습도_리스트.append(data2['list'][i]['main']['humidity'])
			풍향_리스트.append(data2['list'][i]['wind']['speed'])
			날씨_상태.append(data2['list'][i]['weather'][0]['description'])
			날씨_img_리스트.append("http://openweathermap.org/img/wn/{}@2x.png".format(data2['list'][i]['weather'][0]['icon']))

		날짜_리스트 = [날짜_리스트[1:-1:8][0][:10],날짜_리스트[1:-1:8][1][:10],날짜_리스트[1:-1:8][2][:10],날짜_리스트[1:-1:8][3][:10],날짜_리스트[1:-1:8][4][:10]]
		최저온도_리스트 =[min(최저온도_리스트[0:8]),min(최저온도_리스트[8:16]),min(최저온도_리스트[16:24]),min(최저온도_리스트[24:32]),min(최저온도_리스트[32:40])]
		최고온도_리스트 =[max(최고온도_리스트[0:8]),max(최고온도_리스트[8:16]),max(최고온도_리스트[16:24]),max(최고온도_리스트[24:32]),max(최고온도_리스트[32:40])]

		주간날씨_예보 = list(zip(날씨_상태[1:-1:8],최저온도_리스트,최고온도_리스트,습도_리스트[1:-1:8],풍향_리스트[1:-1:8]))

		주간날씨_예보 = pd.DataFrame(주간날씨_예보)
		
		주간날씨_예보 = 주간날씨_예보.rename(index={0:날짜_리스트[0],1:날짜_리스트[1],2:날짜_리스트[2],3:날짜_리스트[3],4:날짜_리스트[4]})
		주간날씨_예보.columns = ['날씨상태','최저온도(℃)','최고온도(℃)','습도(%)','풍속(m/sec)']

		주간날씨_예보["IMAGE"] = 날씨_img_리스트[0:-1:8]		

		def path_to_image_html(path):
			return '<img src="' + path + '" width="55" >'

		@st.cache_resource
		def convert_df(input_df):
			return input_df.to_html(escape=False, formatters=dict(IMAGE=path_to_image_html))
		html = convert_df(주간날씨_예보)

		st.markdown(html , unsafe_allow_html=True)

		current_time = datetime.now()
		yesterday_time = current_time - timedelta(1)
		today = str(current_time.year)+'.'+str(current_time.month)+'.'+str(current_time.day)
		yesterday = str(yesterday_time.year)+'.'+str(yesterday_time.month)+'.'+str(yesterday_time.day)
		
		if fdr.DataReader('USD/KRW', ''+today+'').empty == True:
			df1 = fdr.DataReader('USD/KRW', ''+yesterday+'')
			dollar_data = [df1['Adj Close'][i] for i in range(len(df1['Adj Close']))]
		else:
			df1 = fdr.DataReader('USD/KRW', ''+today+'')
			dollar_data = [df1['Adj Close'][i] for i in range(len(df1['Adj Close']))]
		if fdr.DataReader('KRW/CNY',''+today+'').empty == True:
			df2 = fdr.DataReader('KRW/CNY',''+yesterday+'')
			cny_data = [1/df2['Adj Close'][i] for i in range(len(df2['Adj Close']))]
		else:
			df2 = fdr.DataReader('KRW/CNY',''+today+'')
			cny_data = [1/df2['Adj Close'][i] for i in range(len(df2['Adj Close']))]
		if fdr.DataReader('JPY/KRW',''+today+'').empty == True:
			df3 = fdr.DataReader('JPY/KRW',''+yesterday+'')
			jpn_data = [100*df3['Adj Close'][i] for i in range(len(df3['Adj Close']))]
		else:
			df3 = fdr.DataReader('JPY/KRW',''+today+'')
			jpn_data = [100*df3['Adj Close'][i] for i in range(len(df3['Adj Close']))]
		if fdr.DataReader('EUR/USD',''+today+'').empty == True:
			df4 = fdr.DataReader('EUR/USD',''+yesterday+'')
			eur_data = [x*y for x,y in zip(df1['Adj Close'],df4['Adj Close'])]
		else:
			df4 = fdr.DataReader('EUR/USD',''+today+'')
			eur_data = [x*y for x,y in zip(df1['Adj Close'],df4['Adj Close'])]
		
			
		
		df1_yesterday = fdr.DataReader('USD/KRW', ''+yesterday+'')
		dollar_data_yesterday = [df1_yesterday['Open'][i] for i in range(len(df1_yesterday['Open']))]
		
		df2_yesterday = fdr.DataReader('KRW/CNY',''+yesterday+'')
		cny_data_yesterday = [1/df2_yesterday['Open'][i] for i in range(len(df2_yesterday['Open']))]

		df3_yesterday = fdr.DataReader('JPY/KRW',''+yesterday+'')
		jpn_data_yesterday = [100*df3_yesterday['Open'][i] for i in range(len(df3_yesterday['Open']))]

		df4_yesterday = fdr.DataReader('EUR/USD',''+yesterday+'')
		eur_data_yesterday = [x*y for x,y in zip(df1_yesterday['Open'],df4_yesterday['Open'])]


		if fdr.DataReader('000490',''+today+'').empty == True:
			대동공업 = fdr.DataReader('000490',''+yesterday+'')
			대동공업 = [대동공업['Close'][i] for i in range(len(대동공업['Close']))]
		else:
			대동공업 = fdr.DataReader('000490',''+today+'')
			대동공업 = [대동공업['Close'][i] for i in range(len(대동공업['Close']))]

		대동공업_yesterday = fdr.DataReader('000490',''+yesterday+'')
		대동공업_yesterday = [대동공업_yesterday['Close'][i] for i in range(len(대동공업_yesterday['Close']))]
		try:
			대동공업_주식변동 = int(대동공업[-1]-대동공업_yesterday[0])
		except:
			대동공업_주식변동 = 0

		if fdr.DataReader('008830',''+today+'').empty == True:
			대동기어 = fdr.DataReader('008830',''+yesterday+'')
			대동기어 = [대동기어['Close'][i] for i in range(len(대동기어['Close']))]
		else:
			대동기어 = fdr.DataReader('008830',''+today+'')
			대동기어 = [대동기어['Close'][i] for i in range(len(대동기어['Close']))]

		대동기어_yesterday = fdr.DataReader('008830',''+yesterday+'')
		대동기어_yesterday = [대동기어_yesterday['Close'][i] for i in range(len(대동기어_yesterday['Close']))]
		try:
			대동기어_주식변동 = int(대동기어[-1]-대동기어_yesterday[0])
		except:
			대동기어_주식변동 = 0

		if fdr.DataReader('267270',''+today+'').empty == True:
			현대건설기계 = fdr.DataReader('267270',''+yesterday+'')
			현대건설기계 = [현대건설기계['Close'][i] for i in range(len(현대건설기계['Close']))]
		else:
			현대건설기계 = fdr.DataReader('267270',''+today+'')
			현대건설기계 = [현대건설기계['Close'][i] for i in range(len(현대건설기계['Close']))]

		현대건설기계_yesterday = fdr.DataReader('267270',''+yesterday+'')
		현대건설기계_yesterday = [현대건설기계_yesterday['Close'][i] for i in range(len(현대건설기계_yesterday['Close']))]
		try:
			현대건설기계_주식변동 = int(현대건설기계[-1]-현대건설기계_yesterday[0])
		except:
			현대건설기계_주식변동 = 0

		if fdr.DataReader('002900',''+today+'').empty == True:
			TYM = fdr.DataReader('002900',''+yesterday+'')
			TYM = [TYM['Close'][i] for i in range(len(TYM['Close']))]
		else:
			TYM = fdr.DataReader('002900',''+today+'')
			TYM = [TYM['Close'][i] for i in range(len(TYM['Close']))]

		TYM_yesterday = fdr.DataReader('002900',''+yesterday+'')
		TYM_yesterday = [TYM_yesterday['Close'][i] for i in range(len(TYM_yesterday['Close']))]
		try:
			TYM_주식변동 = int(TYM[-1]-TYM_yesterday[0])
		except:
			TYM_주식변동 = 0

	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)
	col27, col28, col29, col30, col31, col32, col33, col34, col35 = st.columns([0.15,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5])
	with col27:
		st.empty()
	with col28:	
		st.metric(label="💵USD", value=round(dollar_data[-1],2), delta=round(dollar_data[-1] - dollar_data_yesterday[-1],2),delta_color="inverse")
	with col29:	
		st.metric(label="💷CNY", value=round(cny_data[-1],2), delta=round(cny_data[-1] - cny_data_yesterday[-1],2),delta_color="inverse")
	with col30:	
		st.metric(label="💴JPN", value=round(jpn_data[-1],2), delta=round(jpn_data[-1] - jpn_data_yesterday[-1],2),delta_color="inverse")
	with col31:	
		st.metric(label="💶EUR", value=round(eur_data[-1],2), delta=round(eur_data[-1] - eur_data_yesterday[-1],2),delta_color="inverse")
	with col32:
		try:
			st.metric(label="🚜대동공업 주가", value=format(대동공업[-1],','), delta=대동공업_주식변동,delta_color="inverse")
		except:
			st.metric(label="🚜대동공업 주가", value=format(0,','),delta=대동공업_주식변동,delta_color="inverse")
	with col33:
		try:
			st.metric(label="🚛대동기어 주가", value=format(대동기어[-1],','), delta=대동기어_주식변동,delta_color="inverse")
		except:
			st.metric(label="🚛대동기어 주가", value=format(0,','), delta=대동기어_주식변동,delta_color="inverse")
	with col34:
		try:
			st.metric(label="🚋현대건설기계 주가", value=format(현대건설기계[-1],','), delta=현대건설기계_주식변동,delta_color="inverse")
		except:
			st.metric(label="🚋현대건설기계 주가", value=format(0,','), delta=현대건설기계_주식변동,delta_color="inverse")
	with col35:
		try:
			st.metric(label="🚒TYM 주가", value=format(TYM[-1],','), delta=TYM_주식변동,delta_color="inverse")
		except:
			st.metric(label="🚒TYM 주가", value=format(0,','), delta=TYM_주식변동,delta_color="inverse")

	st.markdown("""<hr style="height:2px;border:none;color:#dedcdc;background-color:#dedcdc;" /> """, unsafe_allow_html=True)

with tab9:
	# Path to the image folder
	image_folder = "./image/"

	# Get the list of image files in the folder
	image_files = os.listdir(image_folder)

	# Create a selectbox to choose the image
	selected_image = st.selectbox("게시할 이미지 선택", ['']+image_files)

	# Display the selected image
	if selected_image:
		image_path = os.path.join(image_folder, selected_image)
		st.image(image_path, caption=selected_image, width=1550)

with tab10:
    st.write("ComeSys Production Introduction")

    # 동영상 파일 경로
    video_path = "./movie/제품소개동영상0000-16526.mp4"

    # 동영상 출력
    st.video(video_path)
    # ###################################################################################
	# word = 'intitle:대동공업 | intitle:대동기어 | intitle:엠트론 | intitle:tym | intitle:현대건설기계 | intitle:클라크머터리얼 | intitle:우진산전 | intitle:타타대우상용차 |\
    #         intitle:반도체수급 | intitle:호룡 | intitle:동서콘트롤 | intitle:현대상용차 | intitle:영안모자 | intitle:HSD엔진 | intitle:대동모빌리티'
	# url = 'https://www.google.com/search?q={}&newwindow=1&tbm=nws&ei=TUmuY5LlINeghwOfw7egDQ&start={}&sa=N&ved=2ahUKEwjSv42woqD8AhVX0GEKHZ_hDdQQ8tMDegQIBBAE&biw=763&bih=819&dpr=2.2'
		
	# chrome_options = Options()
	# chrome_options.add_argument("--headless")
	# chrome_options.add_argument('--no-sandbox')
	# chrome_options.add_argument('--disable-gpu')
	# chrome_options.add_argument('--window-size=1920x1080')
	# chrome_options.add_argument("--start-maximized")
	# chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36")
	# chrome_options.add_argument("--log-level=3")
	# driver = webdriver.Chrome(options=chrome_options)
	# wait = WebDriverWait(driver, 20)
	
	# page = 1
	# title_list = []
	# content_list = []
	# link_list = []
	
	# for i in range(0,50,10):
	# 	new_url = url.format(word, i)
	# 	driver.get(new_url)
	# 	# time.sleep(0.1)
	# 	page = page + 1
	# 	titles = driver.find_elements(By.CLASS_NAME, 'mCBkyc')
	# 	for title in titles:
	# 		title_list.append(title.text.replace(",", ""))
	# 	contents = driver.find_elements(By.CLASS_NAME, 'GI74Re')
	# 	for content in contents:
	# 		content_list.append(content.text.replace(",", ""))
	# 	links = driver.find_elements(By.CLASS_NAME, 'WlydOe')
	# 	for link in links:
	# 		link_list.append(link.get_attribute('href'))
	# driver.close()

	# news_df = pd.DataFrame({'제목':title_list,'내용':content_list})
	# st.dataframe(news_df,1500)

# st.sidebar.text('********************************')
# ph = st.sidebar.empty()
# st.sidebar.text('********************************')
# while True:
# 	ph1.subheader(datetime.now(gettz('Asia/Seoul')).strftime('%Y년%m월%d일 %H:%M:%S'))
# 	ph.subheader("⏲️"+datetime.now(gettz('Asia/Seoul')).strftime('%Y년%m월%d일 %H:%M:%S'))
# 	time.sleep(1)
